// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/replicator/replicator.proto

package replicator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	DB "token-strike/tsp2p/server/DB"
	discredit "token-strike/tsp2p/server/discredit"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TransferTokenRequest need to unlock tokens to user
type TransferTokenRequest struct {
	// token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// htlc — secret preimage
	Htlc string `protobuf:"bytes,2,opt,name=htlc,proto3" json:"htlc,omitempty"`
	// lock_id — from LockToken method
	LockId string `protobuf:"bytes,3,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	// address — wallet to send tokens
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferTokenRequest) Reset()         { *m = TransferTokenRequest{} }
func (m *TransferTokenRequest) String() string { return proto.CompactTextString(m) }
func (*TransferTokenRequest) ProtoMessage()    {}
func (*TransferTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{0}
}

func (m *TransferTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferTokenRequest.Unmarshal(m, b)
}
func (m *TransferTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferTokenRequest.Marshal(b, m, deterministic)
}
func (m *TransferTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTokenRequest.Merge(m, src)
}
func (m *TransferTokenRequest) XXX_Size() int {
	return xxx_messageInfo_TransferTokenRequest.Size(m)
}
func (m *TransferTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTokenRequest proto.InternalMessageInfo

func (m *TransferTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TransferTokenRequest) GetHtlc() string {
	if m != nil {
		return m.Htlc
	}
	return ""
}

func (m *TransferTokenRequest) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

func (m *TransferTokenRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// GetTokenListRequest — request token list with pagination
type GetTokenListRequest struct {
	// issuer_id is user login issued this token
	IssuerId string `protobuf:"bytes,1,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	// params of paginaton
	Params               *Pagination `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTokenListRequest) Reset()         { *m = GetTokenListRequest{} }
func (m *GetTokenListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenListRequest) ProtoMessage()    {}
func (*GetTokenListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{1}
}

func (m *GetTokenListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenListRequest.Unmarshal(m, b)
}
func (m *GetTokenListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenListRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenListRequest.Merge(m, src)
}
func (m *GetTokenListRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenListRequest.Size(m)
}
func (m *GetTokenListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenListRequest proto.InternalMessageInfo

func (m *GetTokenListRequest) GetIssuerId() string {
	if m != nil {
		return m.IssuerId
	}
	return ""
}

func (m *GetTokenListRequest) GetParams() *Pagination {
	if m != nil {
		return m.Params
	}
	return nil
}

// GetTokenListResponse — list of tokens with additional info
type GetTokenListResponse struct {
	/// Caleb: We need to be careful to identify a token by it's ID
	// (hash of block 1). This ID cannot be stored inside of the Token object
	// because it will change the hash of the Token object which will then
	// change the hash of the State object, which will then change the hash of
	// block 1, which changes the ID. It is important to use the ID to identify
	//  a token because this contains the initial token holders. IMO this
	// should be `repeated string token_ids = 1;`
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// total number of registered tokens, if the issued_id is passed, only
	// its tokens are taken into account
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenListResponse) Reset()         { *m = GetTokenListResponse{} }
func (m *GetTokenListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenListResponse) ProtoMessage()    {}
func (*GetTokenListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{2}
}

func (m *GetTokenListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenListResponse.Unmarshal(m, b)
}
func (m *GetTokenListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenListResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenListResponse.Merge(m, src)
}
func (m *GetTokenListResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenListResponse.Size(m)
}
func (m *GetTokenListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenListResponse proto.InternalMessageInfo

func (m *GetTokenListResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GetTokenListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Token contain information about token to send it and store in DB
type Token struct {
	// name — identifier of token
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// token — meta info about token
	Token *DB.Token `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// root — hash of last block in blockchain
	Root                 string   `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{3}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetToken() *DB.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Token) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

// TokenOffer is used to send an offer to buy a token
// TODO: rework or remove
type TokenOffer struct {
	// token — name of token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// price in PKT tokens
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	// issuer_info — contain info about token about the issuer server that
	// issued the token
	IssuerInfo *IssuerInfo `protobuf:"bytes,3,opt,name=issuer_info,json=issuerInfo,proto3" json:"issuer_info,omitempty"`
	// valid_until_seconds — protects issuers from such a case, when potential
	// buyer successfully acquires dozens of signatures just in case if that
	// issuer would raise up the price later. If a Token Wallet holder would
	// like to open channel with an outdated offer, Replicator would reject to
	// register this purchase and buyer stays unprotected
	ValidUntilSeconds int64 `protobuf:"varint,4,opt,name=valid_until_seconds,json=validUntilSeconds,proto3" json:"valid_until_seconds,omitempty"`
	// count — the number of tokens to be issued
	Count                uint64   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenOffer) Reset()         { *m = TokenOffer{} }
func (m *TokenOffer) String() string { return proto.CompactTextString(m) }
func (*TokenOffer) ProtoMessage()    {}
func (*TokenOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{4}
}

func (m *TokenOffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenOffer.Unmarshal(m, b)
}
func (m *TokenOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenOffer.Marshal(b, m, deterministic)
}
func (m *TokenOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenOffer.Merge(m, src)
}
func (m *TokenOffer) XXX_Size() int {
	return xxx_messageInfo_TokenOffer.Size(m)
}
func (m *TokenOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenOffer.DiscardUnknown(m)
}

var xxx_messageInfo_TokenOffer proto.InternalMessageInfo

func (m *TokenOffer) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenOffer) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TokenOffer) GetIssuerInfo() *IssuerInfo {
	if m != nil {
		return m.IssuerInfo
	}
	return nil
}

func (m *TokenOffer) GetValidUntilSeconds() int64 {
	if m != nil {
		return m.ValidUntilSeconds
	}
	return 0
}

func (m *TokenOffer) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// IssuerInfo info about issuer server
type IssuerInfo struct {
	// id — value is explicetely used by Replicator to uniquely identify related
	// issuer later in order to ban him (discredite case), since
	// "identity_pubkey", "host" may be changed
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// identity_pubkey — the following field values are used to open payment
	// channel, invoices commands execution etc.
	IdentityPubkey string `protobuf:"bytes,2,opt,name=identity_pubkey,json=identityPubkey,proto3" json:"identity_pubkey,omitempty"`
	// host is used to establish client connection to the issuer's node during
	// some RPC calls
	Host                 string   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuerInfo) Reset()         { *m = IssuerInfo{} }
func (m *IssuerInfo) String() string { return proto.CompactTextString(m) }
func (*IssuerInfo) ProtoMessage()    {}
func (*IssuerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{5}
}

func (m *IssuerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuerInfo.Unmarshal(m, b)
}
func (m *IssuerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuerInfo.Marshal(b, m, deterministic)
}
func (m *IssuerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerInfo.Merge(m, src)
}
func (m *IssuerInfo) XXX_Size() int {
	return xxx_messageInfo_IssuerInfo.Size(m)
}
func (m *IssuerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerInfo proto.InternalMessageInfo

func (m *IssuerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IssuerInfo) GetIdentityPubkey() string {
	if m != nil {
		return m.IdentityPubkey
	}
	return ""
}

func (m *IssuerInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

// TokenBalance godoc
type TokenBalance struct {
	// token — name of token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// available godoc
	Available uint64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// frozen godoc
	Frozen               uint64   `protobuf:"varint,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenBalance) Reset()         { *m = TokenBalance{} }
func (m *TokenBalance) String() string { return proto.CompactTextString(m) }
func (*TokenBalance) ProtoMessage()    {}
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{6}
}

func (m *TokenBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenBalance.Unmarshal(m, b)
}
func (m *TokenBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenBalance.Marshal(b, m, deterministic)
}
func (m *TokenBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBalance.Merge(m, src)
}
func (m *TokenBalance) XXX_Size() int {
	return xxx_messageInfo_TokenBalance.Size(m)
}
func (m *TokenBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalance proto.InternalMessageInfo

func (m *TokenBalance) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenBalance) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *TokenBalance) GetFrozen() uint64 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

// Pagination used for separation on page
type Pagination struct {
	// limit – maximum on the one page
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// offset from the beginning of the list
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{7}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// IssueTokenRequest — info about token will be issued
type IssueTokenRequest struct {
	// name — identifier of new token
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// offer on token issue
	Offer *DB.Token `protobuf:"bytes,2,opt,name=offer,proto3" json:"offer,omitempty"`
	// genesis block for sending to replicator
	Block *DB.Block `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	// list recipients for sending tokens after mint
	Recipient            []*DB.Owner `protobuf:"bytes,4,rep,name=recipient,proto3" json:"recipient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IssueTokenRequest) Reset()         { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()    {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{8}
}

func (m *IssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenRequest.Unmarshal(m, b)
}
func (m *IssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenRequest.Marshal(b, m, deterministic)
}
func (m *IssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenRequest.Merge(m, src)
}
func (m *IssueTokenRequest) XXX_Size() int {
	return xxx_messageInfo_IssueTokenRequest.Size(m)
}
func (m *IssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenRequest proto.InternalMessageInfo

func (m *IssueTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssueTokenRequest) GetOffer() *DB.Token {
	if m != nil {
		return m.Offer
	}
	return nil
}

func (m *IssueTokenRequest) GetBlock() *DB.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *IssueTokenRequest) GetRecipient() []*DB.Owner {
	if m != nil {
		return m.Recipient
	}
	return nil
}

type SyncChainRequest struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Blocks               []*DB.Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SyncChainRequest) Reset()         { *m = SyncChainRequest{} }
func (m *SyncChainRequest) String() string { return proto.CompactTextString(m) }
func (*SyncChainRequest) ProtoMessage()    {}
func (*SyncChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{9}
}

func (m *SyncChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncChainRequest.Unmarshal(m, b)
}
func (m *SyncChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncChainRequest.Marshal(b, m, deterministic)
}
func (m *SyncChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncChainRequest.Merge(m, src)
}
func (m *SyncChainRequest) XXX_Size() int {
	return xxx_messageInfo_SyncChainRequest.Size(m)
}
func (m *SyncChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncChainRequest proto.InternalMessageInfo

func (m *SyncChainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncChainRequest) GetBlocks() []*DB.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// GetBlockSequenceRequest get block sequence by token name
type GetBlockSequenceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockSequenceRequest) Reset()         { *m = GetBlockSequenceRequest{} }
func (m *GetBlockSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockSequenceRequest) ProtoMessage()    {}
func (*GetBlockSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{10}
}

func (m *GetBlockSequenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockSequenceRequest.Unmarshal(m, b)
}
func (m *GetBlockSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockSequenceRequest.Marshal(b, m, deterministic)
}
func (m *GetBlockSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockSequenceRequest.Merge(m, src)
}
func (m *GetBlockSequenceRequest) XXX_Size() int {
	return xxx_messageInfo_GetBlockSequenceRequest.Size(m)
}
func (m *GetBlockSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockSequenceRequest proto.InternalMessageInfo

func (m *GetBlockSequenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetTokenRequest used for identification token for getting
type GetTokenRequest struct {
	// token_id — name or hash of genesis block of the token
	TokenId              string   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{11}
}

func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenRequest.Unmarshal(m, b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(m, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenRequest.Size(m)
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

func (m *GetTokenRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// GetTokenRequest contains the found token
type GetTokenResponse struct {
	// token — information about selected token
	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// discredits — in case the replicator is aware that the issuer has been
	// discredit set it discredit collection
	Discredits           *DiscreditList `protobuf:"bytes,2,opt,name=discredits,proto3" json:"discredits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetTokenResponse) Reset()         { *m = GetTokenResponse{} }
func (m *GetTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenResponse) ProtoMessage()    {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{12}
}

func (m *GetTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenResponse.Unmarshal(m, b)
}
func (m *GetTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenResponse.Merge(m, src)
}
func (m *GetTokenResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenResponse.Size(m)
}
func (m *GetTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenResponse proto.InternalMessageInfo

func (m *GetTokenResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTokenResponse) GetDiscredits() *DiscreditList {
	if m != nil {
		return m.Discredits
	}
	return nil
}

type GetIssuerTokensRequest struct {
	Issuer               []string    `protobuf:"bytes,1,rep,name=issuer,proto3" json:"issuer,omitempty"`
	Params               *Pagination `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetIssuerTokensRequest) Reset()         { *m = GetIssuerTokensRequest{} }
func (m *GetIssuerTokensRequest) String() string { return proto.CompactTextString(m) }
func (*GetIssuerTokensRequest) ProtoMessage()    {}
func (*GetIssuerTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{13}
}

func (m *GetIssuerTokensRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIssuerTokensRequest.Unmarshal(m, b)
}
func (m *GetIssuerTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIssuerTokensRequest.Marshal(b, m, deterministic)
}
func (m *GetIssuerTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssuerTokensRequest.Merge(m, src)
}
func (m *GetIssuerTokensRequest) XXX_Size() int {
	return xxx_messageInfo_GetIssuerTokensRequest.Size(m)
}
func (m *GetIssuerTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssuerTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssuerTokensRequest proto.InternalMessageInfo

func (m *GetIssuerTokensRequest) GetIssuer() []string {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *GetIssuerTokensRequest) GetParams() *Pagination {
	if m != nil {
		return m.Params
	}
	return nil
}

type GetIssuerTokensResponse struct {
	Tokens               []*IssuerTokens `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetIssuerTokensResponse) Reset()         { *m = GetIssuerTokensResponse{} }
func (m *GetIssuerTokensResponse) String() string { return proto.CompactTextString(m) }
func (*GetIssuerTokensResponse) ProtoMessage()    {}
func (*GetIssuerTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{14}
}

func (m *GetIssuerTokensResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIssuerTokensResponse.Unmarshal(m, b)
}
func (m *GetIssuerTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIssuerTokensResponse.Marshal(b, m, deterministic)
}
func (m *GetIssuerTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssuerTokensResponse.Merge(m, src)
}
func (m *GetIssuerTokensResponse) XXX_Size() int {
	return xxx_messageInfo_GetIssuerTokensResponse.Size(m)
}
func (m *GetIssuerTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssuerTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssuerTokensResponse proto.InternalMessageInfo

func (m *GetIssuerTokensResponse) GetTokens() []*IssuerTokens {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type IssuerTokens struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tokens               []*Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuerTokens) Reset()         { *m = IssuerTokens{} }
func (m *IssuerTokens) String() string { return proto.CompactTextString(m) }
func (*IssuerTokens) ProtoMessage()    {}
func (*IssuerTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{15}
}

func (m *IssuerTokens) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuerTokens.Unmarshal(m, b)
}
func (m *IssuerTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuerTokens.Marshal(b, m, deterministic)
}
func (m *IssuerTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerTokens.Merge(m, src)
}
func (m *IssuerTokens) XXX_Size() int {
	return xxx_messageInfo_IssuerTokens.Size(m)
}
func (m *IssuerTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerTokens.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerTokens proto.InternalMessageInfo

func (m *IssuerTokens) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssuerTokens) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type GetUrlSequenceRequest struct {
	TokenName            string   `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUrlSequenceRequest) Reset()         { *m = GetUrlSequenceRequest{} }
func (m *GetUrlSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetUrlSequenceRequest) ProtoMessage()    {}
func (*GetUrlSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{16}
}

func (m *GetUrlSequenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUrlSequenceRequest.Unmarshal(m, b)
}
func (m *GetUrlSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUrlSequenceRequest.Marshal(b, m, deterministic)
}
func (m *GetUrlSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUrlSequenceRequest.Merge(m, src)
}
func (m *GetUrlSequenceRequest) XXX_Size() int {
	return xxx_messageInfo_GetUrlSequenceRequest.Size(m)
}
func (m *GetUrlSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUrlSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUrlSequenceRequest proto.InternalMessageInfo

func (m *GetUrlSequenceRequest) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

type GetUrlSequenceResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUrlSequenceResponse) Reset()         { *m = GetUrlSequenceResponse{} }
func (m *GetUrlSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*GetUrlSequenceResponse) ProtoMessage()    {}
func (*GetUrlSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{17}
}

func (m *GetUrlSequenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUrlSequenceResponse.Unmarshal(m, b)
}
func (m *GetUrlSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUrlSequenceResponse.Marshal(b, m, deterministic)
}
func (m *GetUrlSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUrlSequenceResponse.Merge(m, src)
}
func (m *GetUrlSequenceResponse) XXX_Size() int {
	return xxx_messageInfo_GetUrlSequenceResponse.Size(m)
}
func (m *GetUrlSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUrlSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUrlSequenceResponse proto.InternalMessageInfo

func (m *GetUrlSequenceResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// GetHeadersRequest contains a hash from which need to give all the hashes to
// the last
type GetHeadersRequest struct {
	// token_id — name or hash of genesis block of the token
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// hash from which tokens will be selected
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHeadersRequest) Reset()         { *m = GetHeadersRequest{} }
func (m *GetHeadersRequest) String() string { return proto.CompactTextString(m) }
func (*GetHeadersRequest) ProtoMessage()    {}
func (*GetHeadersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{18}
}

func (m *GetHeadersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHeadersRequest.Unmarshal(m, b)
}
func (m *GetHeadersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHeadersRequest.Marshal(b, m, deterministic)
}
func (m *GetHeadersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHeadersRequest.Merge(m, src)
}
func (m *GetHeadersRequest) XXX_Size() int {
	return xxx_messageInfo_GetHeadersRequest.Size(m)
}
func (m *GetHeadersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHeadersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHeadersRequest proto.InternalMessageInfo

func (m *GetHeadersRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *GetHeadersRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// GetHeadersResponse contain block hashes with token information
type GetHeadersResponse struct {
	// token — information about token
	Token *DB.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// blocks — collcetion of block hash from given to last
	Blocks               []*MerkleBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetHeadersResponse) Reset()         { *m = GetHeadersResponse{} }
func (m *GetHeadersResponse) String() string { return proto.CompactTextString(m) }
func (*GetHeadersResponse) ProtoMessage()    {}
func (*GetHeadersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{19}
}

func (m *GetHeadersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHeadersResponse.Unmarshal(m, b)
}
func (m *GetHeadersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHeadersResponse.Marshal(b, m, deterministic)
}
func (m *GetHeadersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHeadersResponse.Merge(m, src)
}
func (m *GetHeadersResponse) XXX_Size() int {
	return xxx_messageInfo_GetHeadersResponse.Size(m)
}
func (m *GetHeadersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHeadersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHeadersResponse proto.InternalMessageInfo

func (m *GetHeadersResponse) GetToken() *DB.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetHeadersResponse) GetBlocks() []*MerkleBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// MerkleBlock — inforamtion about block
type MerkleBlock struct {
	// hash of block
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// prev_hash — reference of previous block
	PrevHash             string   `protobuf:"bytes,2,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleBlock) Reset()         { *m = MerkleBlock{} }
func (m *MerkleBlock) String() string { return proto.CompactTextString(m) }
func (*MerkleBlock) ProtoMessage()    {}
func (*MerkleBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{20}
}

func (m *MerkleBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleBlock.Unmarshal(m, b)
}
func (m *MerkleBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleBlock.Marshal(b, m, deterministic)
}
func (m *MerkleBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleBlock.Merge(m, src)
}
func (m *MerkleBlock) XXX_Size() int {
	return xxx_messageInfo_MerkleBlock.Size(m)
}
func (m *MerkleBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleBlock proto.InternalMessageInfo

func (m *MerkleBlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MerkleBlock) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

type GetUrlTokenResponse struct {
	State  *DB.State   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Blocks []*DB.Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	// root — Hash of the chain tip block
	Root                 string   `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUrlTokenResponse) Reset()         { *m = GetUrlTokenResponse{} }
func (m *GetUrlTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetUrlTokenResponse) ProtoMessage()    {}
func (*GetUrlTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{21}
}

func (m *GetUrlTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUrlTokenResponse.Unmarshal(m, b)
}
func (m *GetUrlTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUrlTokenResponse.Marshal(b, m, deterministic)
}
func (m *GetUrlTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUrlTokenResponse.Merge(m, src)
}
func (m *GetUrlTokenResponse) XXX_Size() int {
	return xxx_messageInfo_GetUrlTokenResponse.Size(m)
}
func (m *GetUrlTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUrlTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUrlTokenResponse proto.InternalMessageInfo

func (m *GetUrlTokenResponse) GetState() *DB.State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *GetUrlTokenResponse) GetBlocks() []*DB.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *GetUrlTokenResponse) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

// GenerateURLRequest contain name for generate new url
type GenerateURLRequest struct {
	// name of token
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateURLRequest) Reset()         { *m = GenerateURLRequest{} }
func (m *GenerateURLRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateURLRequest) ProtoMessage()    {}
func (*GenerateURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{22}
}

func (m *GenerateURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateURLRequest.Unmarshal(m, b)
}
func (m *GenerateURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateURLRequest.Marshal(b, m, deterministic)
}
func (m *GenerateURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateURLRequest.Merge(m, src)
}
func (m *GenerateURLRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateURLRequest.Size(m)
}
func (m *GenerateURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateURLRequest proto.InternalMessageInfo

func (m *GenerateURLRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GenerateURLResponse contains the url to add it to the token information
type GenerateURLResponse struct {
	// url generated from replications
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateURLResponse) Reset()         { *m = GenerateURLResponse{} }
func (m *GenerateURLResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateURLResponse) ProtoMessage()    {}
func (*GenerateURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{23}
}

func (m *GenerateURLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateURLResponse.Unmarshal(m, b)
}
func (m *GenerateURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateURLResponse.Marshal(b, m, deterministic)
}
func (m *GenerateURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateURLResponse.Merge(m, src)
}
func (m *GenerateURLResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateURLResponse.Size(m)
}
func (m *GenerateURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateURLResponse proto.InternalMessageInfo

func (m *GenerateURLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// IssuerConnection contain local information for connect to issuer
type IssuerConnection struct {
	// host — connection address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// pubkey of the issuer, used on the issuer's server, and to get by key in
	// the descredit local database
	Pubkey               string   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuerConnection) Reset()         { *m = IssuerConnection{} }
func (m *IssuerConnection) String() string { return proto.CompactTextString(m) }
func (*IssuerConnection) ProtoMessage()    {}
func (*IssuerConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{24}
}

func (m *IssuerConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuerConnection.Unmarshal(m, b)
}
func (m *IssuerConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuerConnection.Marshal(b, m, deterministic)
}
func (m *IssuerConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerConnection.Merge(m, src)
}
func (m *IssuerConnection) XXX_Size() int {
	return xxx_messageInfo_IssuerConnection.Size(m)
}
func (m *IssuerConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerConnection.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerConnection proto.InternalMessageInfo

func (m *IssuerConnection) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *IssuerConnection) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// DiscreditList contain collection of dicredit
type DiscreditList struct {
	// dicredits — collections of discredits
	Dicredits            []*DiscreditList_DiscreditWrapper `protobuf:"bytes,1,rep,name=dicredits,proto3" json:"dicredits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DiscreditList) Reset()         { *m = DiscreditList{} }
func (m *DiscreditList) String() string { return proto.CompactTextString(m) }
func (*DiscreditList) ProtoMessage()    {}
func (*DiscreditList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{25}
}

func (m *DiscreditList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscreditList.Unmarshal(m, b)
}
func (m *DiscreditList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscreditList.Marshal(b, m, deterministic)
}
func (m *DiscreditList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscreditList.Merge(m, src)
}
func (m *DiscreditList) XXX_Size() int {
	return xxx_messageInfo_DiscreditList.Size(m)
}
func (m *DiscreditList) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscreditList.DiscardUnknown(m)
}

var xxx_messageInfo_DiscreditList proto.InternalMessageInfo

func (m *DiscreditList) GetDicredits() []*DiscreditList_DiscreditWrapper {
	if m != nil {
		return m.Dicredits
	}
	return nil
}

// DiscreditWrapper used for resolve problem with repeated oneof
// https://github.com/protocolbuffers/protobuf/issues/2592#issuecomment-284540212
type DiscreditList_DiscreditWrapper struct {
	// Types that are valid to be assigned to Discedit:
	//	*DiscreditList_DiscreditWrapper_DuplicateBlock
	//	*DiscreditList_DiscreditWrapper_DenialService
	Discedit             isDiscreditList_DiscreditWrapper_Discedit `protobuf_oneof:"discedit"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *DiscreditList_DiscreditWrapper) Reset()         { *m = DiscreditList_DiscreditWrapper{} }
func (m *DiscreditList_DiscreditWrapper) String() string { return proto.CompactTextString(m) }
func (*DiscreditList_DiscreditWrapper) ProtoMessage()    {}
func (*DiscreditList_DiscreditWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{25, 0}
}

func (m *DiscreditList_DiscreditWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscreditList_DiscreditWrapper.Unmarshal(m, b)
}
func (m *DiscreditList_DiscreditWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscreditList_DiscreditWrapper.Marshal(b, m, deterministic)
}
func (m *DiscreditList_DiscreditWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscreditList_DiscreditWrapper.Merge(m, src)
}
func (m *DiscreditList_DiscreditWrapper) XXX_Size() int {
	return xxx_messageInfo_DiscreditList_DiscreditWrapper.Size(m)
}
func (m *DiscreditList_DiscreditWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscreditList_DiscreditWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_DiscreditList_DiscreditWrapper proto.InternalMessageInfo

type isDiscreditList_DiscreditWrapper_Discedit interface {
	isDiscreditList_DiscreditWrapper_Discedit()
}

type DiscreditList_DiscreditWrapper_DuplicateBlock struct {
	DuplicateBlock *discredit.DuplicateBlock `protobuf:"bytes,2,opt,name=duplicate_block,json=duplicateBlock,proto3,oneof"`
}

type DiscreditList_DiscreditWrapper_DenialService struct {
	DenialService *discredit.DenialService `protobuf:"bytes,3,opt,name=denial_service,json=denialService,proto3,oneof"`
}

func (*DiscreditList_DiscreditWrapper_DuplicateBlock) isDiscreditList_DiscreditWrapper_Discedit() {}

func (*DiscreditList_DiscreditWrapper_DenialService) isDiscreditList_DiscreditWrapper_Discedit() {}

func (m *DiscreditList_DiscreditWrapper) GetDiscedit() isDiscreditList_DiscreditWrapper_Discedit {
	if m != nil {
		return m.Discedit
	}
	return nil
}

func (m *DiscreditList_DiscreditWrapper) GetDuplicateBlock() *discredit.DuplicateBlock {
	if x, ok := m.GetDiscedit().(*DiscreditList_DiscreditWrapper_DuplicateBlock); ok {
		return x.DuplicateBlock
	}
	return nil
}

func (m *DiscreditList_DiscreditWrapper) GetDenialService() *discredit.DenialService {
	if x, ok := m.GetDiscedit().(*DiscreditList_DiscreditWrapper_DenialService); ok {
		return x.DenialService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DiscreditList_DiscreditWrapper) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DiscreditList_DiscreditWrapper_DuplicateBlock)(nil),
		(*DiscreditList_DiscreditWrapper_DenialService)(nil),
	}
}

func init() {
	proto.RegisterType((*TransferTokenRequest)(nil), "replicator.TransferTokenRequest")
	proto.RegisterType((*GetTokenListRequest)(nil), "replicator.GetTokenListRequest")
	proto.RegisterType((*GetTokenListResponse)(nil), "replicator.GetTokenListResponse")
	proto.RegisterType((*Token)(nil), "replicator.Token")
	proto.RegisterType((*TokenOffer)(nil), "replicator.TokenOffer")
	proto.RegisterType((*IssuerInfo)(nil), "replicator.IssuerInfo")
	proto.RegisterType((*TokenBalance)(nil), "replicator.TokenBalance")
	proto.RegisterType((*Pagination)(nil), "replicator.Pagination")
	proto.RegisterType((*IssueTokenRequest)(nil), "replicator.IssueTokenRequest")
	proto.RegisterType((*SyncChainRequest)(nil), "replicator.SyncChainRequest")
	proto.RegisterType((*GetBlockSequenceRequest)(nil), "replicator.GetBlockSequenceRequest")
	proto.RegisterType((*GetTokenRequest)(nil), "replicator.GetTokenRequest")
	proto.RegisterType((*GetTokenResponse)(nil), "replicator.GetTokenResponse")
	proto.RegisterType((*GetIssuerTokensRequest)(nil), "replicator.GetIssuerTokensRequest")
	proto.RegisterType((*GetIssuerTokensResponse)(nil), "replicator.GetIssuerTokensResponse")
	proto.RegisterType((*IssuerTokens)(nil), "replicator.IssuerTokens")
	proto.RegisterType((*GetUrlSequenceRequest)(nil), "replicator.GetUrlSequenceRequest")
	proto.RegisterType((*GetUrlSequenceResponse)(nil), "replicator.GetUrlSequenceResponse")
	proto.RegisterType((*GetHeadersRequest)(nil), "replicator.GetHeadersRequest")
	proto.RegisterType((*GetHeadersResponse)(nil), "replicator.GetHeadersResponse")
	proto.RegisterType((*MerkleBlock)(nil), "replicator.MerkleBlock")
	proto.RegisterType((*GetUrlTokenResponse)(nil), "replicator.GetUrlTokenResponse")
	proto.RegisterType((*GenerateURLRequest)(nil), "replicator.GenerateURLRequest")
	proto.RegisterType((*GenerateURLResponse)(nil), "replicator.GenerateURLResponse")
	proto.RegisterType((*IssuerConnection)(nil), "replicator.IssuerConnection")
	proto.RegisterType((*DiscreditList)(nil), "replicator.DiscreditList")
	proto.RegisterType((*DiscreditList_DiscreditWrapper)(nil), "replicator.DiscreditList.DiscreditWrapper")
}

func init() {
	proto.RegisterFile("protos/replicator/replicator.proto", fileDescriptor_f2f15fabe54a973d)
}

var fileDescriptor_f2f15fabe54a973d = []byte{
	// 1197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdf, 0x52, 0x1b, 0xb7,
	0x17, 0x8e, 0xc1, 0x36, 0xf8, 0x40, 0x0c, 0x28, 0xfc, 0xc0, 0x31, 0xe4, 0x17, 0xba, 0x61, 0x02,
	0xcd, 0x24, 0x76, 0x87, 0xce, 0xb4, 0xd3, 0x5e, 0x64, 0xa6, 0x86, 0x0c, 0x30, 0x49, 0x48, 0xba,
	0xc0, 0xd0, 0x72, 0xe3, 0xca, 0xbb, 0x32, 0x68, 0xbc, 0xec, 0x6e, 0x25, 0x99, 0x0c, 0xbd, 0xed,
	0x93, 0xf4, 0xaa, 0x8f, 0xd0, 0x97, 0xe9, 0xc3, 0x74, 0x74, 0xa4, 0xf5, 0xfe, 0xb1, 0x4d, 0xda,
	0x3b, 0xe9, 0x9c, 0xb3, 0x9f, 0xa4, 0xef, 0x9c, 0xf3, 0x49, 0x0b, 0x4e, 0x2c, 0x22, 0x15, 0xc9,
	0xb6, 0x60, 0x71, 0xc0, 0x3d, 0xaa, 0x22, 0x91, 0x19, 0xb6, 0xd0, 0x49, 0x20, 0xb5, 0x34, 0x37,
	0xae, 0xa2, 0xe8, 0x2a, 0x60, 0x6d, 0xf4, 0xf4, 0x86, 0xfd, 0x36, 0xbb, 0x89, 0xd5, 0x9d, 0x09,
	0x6c, 0xae, 0x5b, 0xb0, 0x83, 0x4e, 0x5b, 0x45, 0x03, 0x16, 0xfa, 0x3d, 0xeb, 0xd8, 0xb2, 0x0e,
	0x9f, 0x4b, 0x4f, 0x30, 0x9f, 0xab, 0x74, 0x64, 0x22, 0x1c, 0x09, 0xab, 0x67, 0x82, 0x86, 0xb2,
	0xcf, 0xc4, 0x99, 0xfe, 0xd4, 0x65, 0xbf, 0x0e, 0x99, 0x54, 0x64, 0x15, 0x2a, 0x08, 0xd5, 0x28,
	0x6d, 0x95, 0x76, 0x6b, 0xae, 0x99, 0x10, 0x02, 0xe5, 0x6b, 0x15, 0x78, 0x8d, 0x19, 0x34, 0xe2,
	0x98, 0xac, 0xc3, 0x5c, 0x10, 0x79, 0x83, 0x2e, 0xf7, 0x1b, 0xb3, 0x68, 0xae, 0xea, 0xe9, 0xb1,
	0x4f, 0x1a, 0x30, 0x47, 0x7d, 0x5f, 0x30, 0x29, 0x1b, 0x65, 0x74, 0x24, 0x53, 0xa7, 0x07, 0x8f,
	0x0e, 0x99, 0xc2, 0xf5, 0xde, 0x71, 0xa9, 0x92, 0x35, 0x37, 0xa0, 0xc6, 0xa5, 0x1c, 0x32, 0xa1,
	0xb1, 0xcc, 0xba, 0xf3, 0xc6, 0x70, 0xec, 0x93, 0x16, 0x54, 0x63, 0x2a, 0xe8, 0x8d, 0xc4, 0xc5,
	0x17, 0xf6, 0xd6, 0x5a, 0x19, 0xbe, 0x3e, 0xd2, 0x2b, 0x1e, 0x52, 0xc5, 0xa3, 0xd0, 0xb5, 0x51,
	0xce, 0x05, 0xac, 0xe6, 0xd7, 0x90, 0x71, 0x14, 0x4a, 0x46, 0xbe, 0x84, 0x2a, 0x9e, 0x45, 0x36,
	0x4a, 0x5b, 0xb3, 0xbb, 0x0b, 0x7b, 0x2b, 0x59, 0x1c, 0x43, 0x81, 0x0d, 0x30, 0x1c, 0x28, 0x1a,
	0xe0, 0x8a, 0x15, 0xd7, 0x4c, 0x9c, 0x73, 0xa8, 0x9c, 0x25, 0x64, 0x84, 0xf4, 0x86, 0xd9, 0x9d,
	0xe2, 0x98, 0x6c, 0x27, 0xb4, 0x99, 0x4d, 0xd6, 0x5b, 0x49, 0x3e, 0x0c, 0x72, 0x4a, 0xa3, 0x88,
	0x22, 0x65, 0xf9, 0xc2, 0xb1, 0xf3, 0x57, 0x09, 0x00, 0x83, 0x3e, 0xf4, 0xfb, 0x4c, 0x4c, 0xe1,
	0x7f, 0x15, 0x2a, 0xb1, 0xe0, 0x1e, 0x43, 0xf8, 0xb2, 0x6b, 0x26, 0xe4, 0x5b, 0x58, 0x48, 0x78,
	0x0b, 0xfb, 0x11, 0xa2, 0x16, 0xf8, 0x39, 0x36, 0x2c, 0x86, 0xfd, 0xc8, 0x05, 0x3e, 0x1a, 0x93,
	0x16, 0x3c, 0xba, 0xa5, 0x01, 0xf7, 0xbb, 0xc3, 0x50, 0xf1, 0xa0, 0x2b, 0x99, 0x17, 0x85, 0xbe,
	0xc9, 0xd6, 0xac, 0xbb, 0x82, 0xae, 0x73, 0xed, 0x39, 0x35, 0x0e, 0xbd, 0xbc, 0x17, 0x0d, 0x43,
	0xd5, 0xa8, 0x98, 0xe5, 0x71, 0xe2, 0xfc, 0x0c, 0x90, 0xe2, 0x93, 0x3a, 0xcc, 0x8c, 0xb2, 0x37,
	0xc3, 0x7d, 0xb2, 0x03, 0x4b, 0xdc, 0x67, 0xa1, 0xe2, 0xea, 0xae, 0x1b, 0x0f, 0x7b, 0x03, 0x76,
	0x67, 0xab, 0xa7, 0x9e, 0x98, 0x3f, 0xa2, 0x15, 0x6b, 0x2b, 0x92, 0x23, 0x52, 0xf4, 0xd8, 0xb9,
	0x84, 0x45, 0xe4, 0xa4, 0x43, 0x03, 0x1a, 0x7a, 0x6c, 0x0a, 0x2b, 0x9b, 0x50, 0xa3, 0xb7, 0x94,
	0x07, 0xb4, 0x17, 0x24, 0xcc, 0xa4, 0x06, 0xb2, 0x06, 0xd5, 0xbe, 0x88, 0x7e, 0x63, 0x21, 0x22,
	0x97, 0x5d, 0x3b, 0x73, 0xbe, 0x07, 0x48, 0xcb, 0x46, 0x23, 0x07, 0xfc, 0x86, 0x2b, 0x44, 0x2e,
	0xbb, 0x66, 0xa2, 0xbf, 0x8d, 0xfa, 0x7d, 0xc9, 0x94, 0x85, 0xb5, 0x33, 0xe7, 0x8f, 0x12, 0xac,
	0xe0, 0x99, 0x73, 0x3d, 0x33, 0xa5, 0x20, 0x22, 0x9d, 0xd0, 0x69, 0x05, 0x81, 0x4e, 0x1d, 0xd5,
	0xd3, 0x5d, 0x63, 0x73, 0x97, 0x46, 0x75, 0xb4, 0xd5, 0x35, 0x4e, 0xf2, 0x12, 0x6a, 0x82, 0x79,
	0x3c, 0xe6, 0x2c, 0x54, 0x8d, 0x32, 0x56, 0x6f, 0x1a, 0xf9, 0xe1, 0x53, 0xc8, 0x84, 0x9b, 0x06,
	0x38, 0x27, 0xb0, 0x7c, 0x7a, 0x17, 0x7a, 0xfb, 0xd7, 0x94, 0xdf, 0xbb, 0xc3, 0xe7, 0x50, 0x45,
	0x78, 0xdd, 0x58, 0xb3, 0x13, 0x16, 0xb7, 0x5e, 0xe7, 0x15, 0xac, 0x1f, 0x32, 0x85, 0xb6, 0x53,
	0x0d, 0x17, 0x7a, 0xec, 0x1e, 0x58, 0xe7, 0x25, 0x2c, 0x25, 0xfd, 0x97, 0x84, 0x3d, 0x86, 0x79,
	0x84, 0x4e, 0xdb, 0x7b, 0x0e, 0xe7, 0xc7, 0xbe, 0x73, 0x0b, 0xcb, 0x69, 0xb4, 0xed, 0xd4, 0x9d,
	0x6c, 0xb2, 0x27, 0x36, 0xaa, 0xcd, 0xff, 0x77, 0x00, 0x23, 0x59, 0x4b, 0xe4, 0xe1, 0x71, 0x36,
	0xfa, 0x20, 0xf1, 0xa2, 0x12, 0x64, 0x82, 0x9d, 0x5f, 0x60, 0xed, 0x90, 0x29, 0x53, 0xbe, 0x88,
	0x29, 0x93, 0xcd, 0xae, 0x41, 0xd5, 0x74, 0x0a, 0xea, 0x44, 0xcd, 0xb5, 0xb3, 0xff, 0xac, 0x43,
	0x6f, 0x91, 0xb6, 0xfc, 0x0a, 0xf6, 0x80, 0x5f, 0x15, 0xa4, 0xa8, 0x31, 0xde, 0xb2, 0xf6, 0x0b,
	0x1b, 0xe7, 0xbc, 0x87, 0xc5, 0xac, 0x7d, 0x62, 0x3e, 0x53, 0x81, 0x9b, 0xf9, 0x8c, 0xc0, 0x39,
	0xdf, 0xc0, 0xff, 0x0e, 0x99, 0x3a, 0x17, 0x41, 0x31, 0xa1, 0x4f, 0x00, 0x4c, 0xa6, 0x32, 0xe8,
	0x35, 0xb4, 0x9c, 0xe8, 0xdc, 0xbe, 0x40, 0xd6, 0x72, 0xdf, 0xd9, 0x23, 0x2d, 0xc3, 0xec, 0x50,
	0x04, 0xf6, 0x0b, 0x3d, 0x74, 0x3a, 0xb0, 0x72, 0xc8, 0xd4, 0x11, 0xa3, 0x3e, 0x13, 0xf2, 0xf3,
	0x95, 0x80, 0x32, 0x40, 0xe5, 0xf5, 0xe8, 0x8a, 0xa1, 0xf2, 0xda, 0x19, 0x00, 0xc9, 0x62, 0xd8,
	0xb5, 0xb6, 0xf3, 0xf5, 0x31, 0x45, 0x6b, 0xdb, 0x85, 0xf2, 0x5e, 0xcf, 0xd2, 0xf1, 0x9e, 0x89,
	0x41, 0xc0, 0xf2, 0x75, 0xfe, 0x1a, 0x16, 0x32, 0xe6, 0xd1, 0x7e, 0x4a, 0xe9, 0x7e, 0xf4, 0x45,
	0x15, 0x0b, 0x76, 0xdb, 0xcd, 0x6c, 0x74, 0x5e, 0x1b, 0x8e, 0xf4, 0x66, 0x3f, 0xe1, 0xe5, 0x76,
	0x2e, 0x82, 0x7c, 0x35, 0x6f, 0x43, 0x45, 0x2a, 0xaa, 0xd8, 0xd8, 0x6e, 0x4f, 0xb5, 0xd5, 0x35,
	0xce, 0x7f, 0xdb, 0x8c, 0x13, 0x6f, 0x90, 0x5d, 0xcd, 0x52, 0xc8, 0x04, 0x55, 0xec, 0xdc, 0x7d,
	0x77, 0x5f, 0x6f, 0xee, 0xe8, 0x2d, 0x66, 0x22, 0xa7, 0x26, 0xef, 0x35, 0x2c, 0x9b, 0x7a, 0xdb,
	0x8f, 0xc2, 0x90, 0x79, 0xa8, 0x94, 0x89, 0x4e, 0x97, 0x52, 0x9d, 0xd6, 0xcd, 0x92, 0xd3, 0x76,
	0x3b, 0x73, 0x7e, 0x9f, 0x81, 0x87, 0xb9, 0xe6, 0x23, 0x47, 0x50, 0xf3, 0x79, 0xd2, 0xaa, 0xa6,
	0xec, 0x5f, 0x4c, 0x6d, 0xd5, 0x74, 0x76, 0x21, 0x68, 0x1c, 0x6b, 0x7d, 0x1b, 0x7d, 0xdc, 0xfc,
	0xb3, 0x04, 0xcb, 0x45, 0x3f, 0x39, 0x80, 0x25, 0x7f, 0x68, 0xc0, 0x58, 0xd7, 0x48, 0x6a, 0xa2,
	0x07, 0xe9, 0xcb, 0xe7, 0x20, 0x89, 0x40, 0x4e, 0x8f, 0x1e, 0xb8, 0x75, 0x3f, 0x67, 0x21, 0x3f,
	0x40, 0xdd, 0x67, 0x21, 0xa7, 0xfa, 0x4a, 0x14, 0xb7, 0xfa, 0xbe, 0x35, 0xba, 0xdc, 0xc8, 0x82,
	0x60, 0xc0, 0xa9, 0xf1, 0x1f, 0x3d, 0x70, 0x1f, 0xfa, 0x59, 0x43, 0x07, 0x60, 0x5e, 0xc7, 0xea,
	0xd0, 0xbd, 0xbf, 0x2b, 0x00, 0xee, 0xe8, 0x88, 0x64, 0xdf, 0xde, 0x97, 0xe6, 0x15, 0xf1, 0x64,
	0xac, 0xe9, 0xb3, 0x9a, 0xd9, 0x5c, 0x6b, 0x99, 0x87, 0x5f, 0x2b, 0x79, 0xf8, 0xb5, 0xde, 0xe8,
	0x87, 0x1f, 0xd9, 0x87, 0xda, 0x48, 0xdd, 0xc9, 0x66, 0x16, 0xa3, 0x28, 0xfa, 0xd3, 0x20, 0x76,
	0x4b, 0xe4, 0x27, 0x54, 0xdd, 0x9c, 0xa4, 0x93, 0x67, 0x59, 0xac, 0x29, 0x82, 0xdf, 0x7c, 0x5a,
	0x08, 0x1a, 0xab, 0xf6, 0xb7, 0x00, 0x69, 0xc7, 0xe6, 0xcf, 0x38, 0xa6, 0x06, 0xcd, 0xff, 0x4f,
	0x73, 0x5b, 0xb0, 0x37, 0x30, 0x9f, 0x5c, 0x0e, 0x64, 0xa3, 0x10, 0x9b, 0x23, 0x6b, 0x73, 0xb2,
	0xd3, 0xc2, 0x5c, 0xe2, 0x8d, 0x94, 0xd3, 0x4f, 0xa7, 0xf0, 0xc1, 0x84, 0x8b, 0xa0, 0xf9, 0xec,
	0xde, 0x18, 0x8b, 0x7d, 0x01, 0xf5, 0xbc, 0x22, 0x92, 0x2f, 0xc6, 0x29, 0x2a, 0xb2, 0xe8, 0xdc,
	0x17, 0x62, 0x81, 0x7f, 0x84, 0xc5, 0xec, 0x33, 0x96, 0x3c, 0x9d, 0x74, 0xc4, 0xcc, 0x23, 0xba,
	0xb9, 0x35, 0x3d, 0xc0, 0x42, 0x9e, 0xc0, 0x42, 0xa6, 0xfb, 0x49, 0x81, 0xfd, 0xa2, 0x80, 0x14,
	0x73, 0x3d, 0x26, 0x1b, 0x9d, 0xe7, 0x97, 0xdb, 0x28, 0x52, 0xaf, 0xa4, 0x12, 0x7c, 0xc0, 0xda,
	0x4a, 0xc6, 0x7b, 0x71, 0x5b, 0x77, 0x0e, 0xcb, 0xfe, 0xd4, 0xf4, 0xaa, 0x58, 0x7f, 0x5f, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x14, 0x1d, 0xea, 0xa2, 0xfb, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicatorClient interface {
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncChain(ctx context.Context, opts ...grpc.CallOption) (Replicator_SyncChainClient, error)
	// GetBlockSequence get all sequence from a selected by token name bucket and return it
	GetBlockSequence(ctx context.Context, in *GetBlockSequenceRequest, opts ...grpc.CallOption) (*GetUrlTokenResponse, error)
	// GetHeaders returns headers of all block from given hash to last block
	GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error)
	// GetToken returns only one specified token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	GetIssuerTokens(ctx context.Context, in *GetIssuerTokensRequest, opts ...grpc.CallOption) (*GetIssuerTokensResponse, error)
	GetUrlSequence(ctx context.Context, in *GetUrlSequenceRequest, opts ...grpc.CallOption) (*GetUrlSequenceResponse, error)
	// GetTokenList — return list of issued token with infomation about
	// expiration time and fix price.
	GetTokenList(ctx context.Context, in *GetTokenListRequest, opts ...grpc.CallOption) (*GetTokenListResponse, error)
	// GenerateURL return url from every replication server to add it to
	// inforamtion about token
	GenerateURL(ctx context.Context, in *GenerateURLRequest, opts ...grpc.CallOption) (*GenerateURLResponse, error)
}

type replicatorClient struct {
	cc *grpc.ClientConn
}

func NewReplicatorClient(cc *grpc.ClientConn) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) SyncChain(ctx context.Context, opts ...grpc.CallOption) (Replicator_SyncChainClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Replicator_serviceDesc.Streams[0], "/replicator.Replicator/SyncChain", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicatorSyncChainClient{stream}
	return x, nil
}

type Replicator_SyncChainClient interface {
	Send(*SyncChainRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type replicatorSyncChainClient struct {
	grpc.ClientStream
}

func (x *replicatorSyncChainClient) Send(m *SyncChainRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicatorSyncChainClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicatorClient) GetBlockSequence(ctx context.Context, in *GetBlockSequenceRequest, opts ...grpc.CallOption) (*GetUrlTokenResponse, error) {
	out := new(GetUrlTokenResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetBlockSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error) {
	out := new(GetHeadersResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetIssuerTokens(ctx context.Context, in *GetIssuerTokensRequest, opts ...grpc.CallOption) (*GetIssuerTokensResponse, error) {
	out := new(GetIssuerTokensResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetIssuerTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetUrlSequence(ctx context.Context, in *GetUrlSequenceRequest, opts ...grpc.CallOption) (*GetUrlSequenceResponse, error) {
	out := new(GetUrlSequenceResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetUrlSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetTokenList(ctx context.Context, in *GetTokenListRequest, opts ...grpc.CallOption) (*GetTokenListResponse, error) {
	out := new(GetTokenListResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GenerateURL(ctx context.Context, in *GenerateURLRequest, opts ...grpc.CallOption) (*GenerateURLResponse, error) {
	out := new(GenerateURLResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GenerateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
type ReplicatorServer interface {
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	IssueToken(context.Context, *IssueTokenRequest) (*empty.Empty, error)
	SyncChain(Replicator_SyncChainServer) error
	// GetBlockSequence get all sequence from a selected by token name bucket and return it
	GetBlockSequence(context.Context, *GetBlockSequenceRequest) (*GetUrlTokenResponse, error)
	// GetHeaders returns headers of all block from given hash to last block
	GetHeaders(context.Context, *GetHeadersRequest) (*GetHeadersResponse, error)
	// GetToken returns only one specified token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	GetIssuerTokens(context.Context, *GetIssuerTokensRequest) (*GetIssuerTokensResponse, error)
	GetUrlSequence(context.Context, *GetUrlSequenceRequest) (*GetUrlSequenceResponse, error)
	// GetTokenList — return list of issued token with infomation about
	// expiration time and fix price.
	GetTokenList(context.Context, *GetTokenListRequest) (*GetTokenListResponse, error)
	// GenerateURL return url from every replication server to add it to
	// inforamtion about token
	GenerateURL(context.Context, *GenerateURLRequest) (*GenerateURLResponse, error)
}

// UnimplementedReplicatorServer can be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (*UnimplementedReplicatorServer) IssueToken(ctx context.Context, req *IssueTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedReplicatorServer) SyncChain(srv Replicator_SyncChainServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncChain not implemented")
}
func (*UnimplementedReplicatorServer) GetBlockSequence(ctx context.Context, req *GetBlockSequenceRequest) (*GetUrlTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockSequence not implemented")
}
func (*UnimplementedReplicatorServer) GetHeaders(ctx context.Context, req *GetHeadersRequest) (*GetHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaders not implemented")
}
func (*UnimplementedReplicatorServer) GetToken(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedReplicatorServer) GetIssuerTokens(ctx context.Context, req *GetIssuerTokensRequest) (*GetIssuerTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerTokens not implemented")
}
func (*UnimplementedReplicatorServer) GetUrlSequence(ctx context.Context, req *GetUrlSequenceRequest) (*GetUrlSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlSequence not implemented")
}
func (*UnimplementedReplicatorServer) GetTokenList(ctx context.Context, req *GetTokenListRequest) (*GetTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (*UnimplementedReplicatorServer) GenerateURL(ctx context.Context, req *GenerateURLRequest) (*GenerateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateURL not implemented")
}

func RegisterReplicatorServer(s *grpc.Server, srv ReplicatorServer) {
	s.RegisterService(&_Replicator_serviceDesc, srv)
}

func _Replicator_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_SyncChain_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicatorServer).SyncChain(&replicatorSyncChainServer{stream})
}

type Replicator_SyncChainServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SyncChainRequest, error)
	grpc.ServerStream
}

type replicatorSyncChainServer struct {
	grpc.ServerStream
}

func (x *replicatorSyncChainServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicatorSyncChainServer) Recv() (*SyncChainRequest, error) {
	m := new(SyncChainRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replicator_GetBlockSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetBlockSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetBlockSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetBlockSequence(ctx, req.(*GetBlockSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetHeaders(ctx, req.(*GetHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetIssuerTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetIssuerTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetIssuerTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetIssuerTokens(ctx, req.(*GetIssuerTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetUrlSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetUrlSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetUrlSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetUrlSequence(ctx, req.(*GetUrlSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetTokenList(ctx, req.(*GetTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GenerateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GenerateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GenerateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GenerateURL(ctx, req.(*GenerateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replicator.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueToken",
			Handler:    _Replicator_IssueToken_Handler,
		},
		{
			MethodName: "GetBlockSequence",
			Handler:    _Replicator_GetBlockSequence_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _Replicator_GetHeaders_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Replicator_GetToken_Handler,
		},
		{
			MethodName: "GetIssuerTokens",
			Handler:    _Replicator_GetIssuerTokens_Handler,
		},
		{
			MethodName: "GetUrlSequence",
			Handler:    _Replicator_GetUrlSequence_Handler,
		},
		{
			MethodName: "GetTokenList",
			Handler:    _Replicator_GetTokenList_Handler,
		},
		{
			MethodName: "GenerateURL",
			Handler:    _Replicator_GenerateURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncChain",
			Handler:       _Replicator_SyncChain_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/replicator/replicator.proto",
}
