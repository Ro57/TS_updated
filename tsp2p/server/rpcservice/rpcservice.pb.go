// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/PRCSevice/rpcservice.proto

package rpcservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	DB "token-strike/tsp2p/server/DB"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TransferTokensRequest contain information about sending transaction
type TransferTokensRequest struct {
	// token — token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// lock — hash of locked tokens
	Lock []byte `protobuf:"bytes,2,opt,name=lock,proto3" json:"lock,omitempty"`
	// htlc — funds transfer contract generated in lightning network
	Htlc                 []byte   `protobuf:"bytes,3,opt,name=htlc,proto3" json:"htlc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferTokensRequest) Reset()         { *m = TransferTokensRequest{} }
func (m *TransferTokensRequest) String() string { return proto.CompactTextString(m) }
func (*TransferTokensRequest) ProtoMessage()    {}
func (*TransferTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{0}
}

func (m *TransferTokensRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferTokensRequest.Unmarshal(m, b)
}
func (m *TransferTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferTokensRequest.Marshal(b, m, deterministic)
}
func (m *TransferTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTokensRequest.Merge(m, src)
}
func (m *TransferTokensRequest) XXX_Size() int {
	return xxx_messageInfo_TransferTokensRequest.Size(m)
}
func (m *TransferTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTokensRequest proto.InternalMessageInfo

func (m *TransferTokensRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TransferTokensRequest) GetLock() []byte {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (m *TransferTokensRequest) GetHtlc() []byte {
	if m != nil {
		return m.Htlc
	}
	return nil
}

// TransferTokensResponse — contain transaction id
type TransferTokensResponse struct {
	// txid — hash of transaction information
	Txid                 []byte   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferTokensResponse) Reset()         { *m = TransferTokensResponse{} }
func (m *TransferTokensResponse) String() string { return proto.CompactTextString(m) }
func (*TransferTokensResponse) ProtoMessage()    {}
func (*TransferTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{1}
}

func (m *TransferTokensResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferTokensResponse.Unmarshal(m, b)
}
func (m *TransferTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferTokensResponse.Marshal(b, m, deterministic)
}
func (m *TransferTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTokensResponse.Merge(m, src)
}
func (m *TransferTokensResponse) XXX_Size() int {
	return xxx_messageInfo_TransferTokensResponse.Size(m)
}
func (m *TransferTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTokensResponse proto.InternalMessageInfo

func (m *TransferTokensResponse) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

// IssueTokenRequest contains a list of owners and the number of pkt blocks
// before the token expires
type IssueTokenRequest struct {
	// owners - contains information about all token holders,
	// the number of tokens is the sum of all tokens of the owners
	Owners []*DB.Owner `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	// expiration — number of PKT block after which the token expires
	Expiration           int32    `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueTokenRequest) Reset()         { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()    {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{2}
}

func (m *IssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenRequest.Unmarshal(m, b)
}
func (m *IssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenRequest.Marshal(b, m, deterministic)
}
func (m *IssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenRequest.Merge(m, src)
}
func (m *IssueTokenRequest) XXX_Size() int {
	return xxx_messageInfo_IssueTokenRequest.Size(m)
}
func (m *IssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenRequest proto.InternalMessageInfo

func (m *IssueTokenRequest) GetOwners() []*DB.Owner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *IssueTokenRequest) GetExpiration() int32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

// IssueTokenResponse contain token id for access to it
type IssueTokenResponse struct {
	// token_id — hash of token struct
	TokenId              string   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueTokenResponse) Reset()         { *m = IssueTokenResponse{} }
func (m *IssueTokenResponse) String() string { return proto.CompactTextString(m) }
func (*IssueTokenResponse) ProtoMessage()    {}
func (*IssueTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{3}
}

func (m *IssueTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenResponse.Unmarshal(m, b)
}
func (m *IssueTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenResponse.Marshal(b, m, deterministic)
}
func (m *IssueTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenResponse.Merge(m, src)
}
func (m *IssueTokenResponse) XXX_Size() int {
	return xxx_messageInfo_IssueTokenResponse.Size(m)
}
func (m *IssueTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenResponse proto.InternalMessageInfo

func (m *IssueTokenResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// LockTokenRequest send information about token
type LockTokenRequest struct {
	// token_id — hash of token struct
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// amount of locked token
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// recipient — token holder address
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// secret_hash — hash of htlc
	SecretHash           string   `protobuf:"bytes,4,opt,name=secret_hash,json=secretHash,proto3" json:"secret_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockTokenRequest) Reset()         { *m = LockTokenRequest{} }
func (m *LockTokenRequest) String() string { return proto.CompactTextString(m) }
func (*LockTokenRequest) ProtoMessage()    {}
func (*LockTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{4}
}

func (m *LockTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockTokenRequest.Unmarshal(m, b)
}
func (m *LockTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockTokenRequest.Marshal(b, m, deterministic)
}
func (m *LockTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTokenRequest.Merge(m, src)
}
func (m *LockTokenRequest) XXX_Size() int {
	return xxx_messageInfo_LockTokenRequest.Size(m)
}
func (m *LockTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockTokenRequest proto.InternalMessageInfo

func (m *LockTokenRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *LockTokenRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LockTokenRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *LockTokenRequest) GetSecretHash() string {
	if m != nil {
		return m.SecretHash
	}
	return ""
}

// LockTokenResponse response with hash of lock
type LockTokenResponse struct {
	// lock_id — hash of lock
	LockId               string   `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockTokenResponse) Reset()         { *m = LockTokenResponse{} }
func (m *LockTokenResponse) String() string { return proto.CompactTextString(m) }
func (*LockTokenResponse) ProtoMessage()    {}
func (*LockTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c2ffff63f68be3, []int{5}
}

func (m *LockTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockTokenResponse.Unmarshal(m, b)
}
func (m *LockTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockTokenResponse.Marshal(b, m, deterministic)
}
func (m *LockTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTokenResponse.Merge(m, src)
}
func (m *LockTokenResponse) XXX_Size() int {
	return xxx_messageInfo_LockTokenResponse.Size(m)
}
func (m *LockTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockTokenResponse proto.InternalMessageInfo

func (m *LockTokenResponse) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

func init() {
	proto.RegisterType((*TransferTokensRequest)(nil), "rpcservice.TransferTokensRequest")
	proto.RegisterType((*TransferTokensResponse)(nil), "rpcservice.TransferTokensResponse")
	proto.RegisterType((*IssueTokenRequest)(nil), "rpcservice.IssueTokenRequest")
	proto.RegisterType((*IssueTokenResponse)(nil), "rpcservice.IssueTokenResponse")
	proto.RegisterType((*LockTokenRequest)(nil), "rpcservice.LockTokenRequest")
	proto.RegisterType((*LockTokenResponse)(nil), "rpcservice.LockTokenResponse")
}

func init() { proto.RegisterFile("protos/PRCSevice/rpcservice.proto", fileDescriptor_30c2ffff63f68be3) }

var fileDescriptor_30c2ffff63f68be3 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x55, 0xe8, 0x76, 0x4b, 0xa6, 0x15, 0xa2, 0x16, 0xb4, 0x21, 0xb4, 0x65, 0x1b, 0xa1, 0x6a,
	0x0f, 0x65, 0x2d, 0x2d, 0x7f, 0xd0, 0x72, 0xe8, 0x0a, 0x24, 0x2a, 0x6f, 0xb9, 0xc0, 0xa1, 0xca,
	0x26, 0xd3, 0x6e, 0xb4, 0x5b, 0xdb, 0xd8, 0x0e, 0x94, 0x3b, 0xff, 0xcc, 0x15, 0x79, 0xe2, 0x92,
	0x50, 0xd8, 0xde, 0x66, 0xde, 0x7b, 0x7e, 0x7e, 0x19, 0x4f, 0xe0, 0x50, 0x1b, 0xe5, 0x94, 0xe5,
	0xe7, 0xe2, 0x74, 0x8a, 0xdf, 0xaa, 0x02, 0xb9, 0xd1, 0x85, 0x45, 0xe3, 0xcb, 0x11, 0x71, 0x0c,
	0x5a, 0x24, 0x7d, 0x79, 0xad, 0xd4, 0xf5, 0x12, 0x39, 0x31, 0xb3, 0xfa, 0x8a, 0xe3, 0x8d, 0x76,
	0x3f, 0x1a, 0x61, 0xba, 0x1b, 0xbc, 0xde, 0x9d, 0x70, 0xa7, 0x16, 0x28, 0xcb, 0x59, 0x43, 0x64,
	0x9f, 0xe0, 0xf9, 0x85, 0xc9, 0xa5, 0xbd, 0x42, 0x73, 0xe1, 0x09, 0x2b, 0xf0, 0x6b, 0x8d, 0xd6,
	0xb1, 0x67, 0xb0, 0x4e, 0xca, 0x24, 0x1a, 0x44, 0xc3, 0x58, 0x34, 0x0d, 0x63, 0xd0, 0x5b, 0xaa,
	0x62, 0x91, 0x3c, 0x1a, 0x44, 0xc3, 0x2d, 0x41, 0xb5, 0xc7, 0xe6, 0x6e, 0x59, 0x24, 0x6b, 0x0d,
	0xe6, 0xeb, 0xec, 0x18, 0x76, 0xee, 0xdb, 0x5a, 0xad, 0xa4, 0x45, 0xaf, 0x76, 0xb7, 0x55, 0x49,
	0xb6, 0x5b, 0x82, 0xea, 0xec, 0x0b, 0x6c, 0x4f, 0xac, 0xad, 0x91, 0xa4, 0x77, 0x01, 0x8e, 0xa0,
	0xaf, 0xbe, 0x4b, 0x34, 0x36, 0x89, 0x06, 0x6b, 0xc3, 0xcd, 0xf1, 0x93, 0xd1, 0x5d, 0xf2, 0x8f,
	0x1e, 0x16, 0x81, 0x65, 0x07, 0x00, 0x78, 0xab, 0x2b, 0x93, 0xbb, 0x4a, 0x49, 0x0a, 0xb6, 0x2e,
	0x3a, 0x48, 0xc6, 0x81, 0x75, 0xcd, 0x43, 0x8c, 0x17, 0xf0, 0x98, 0xec, 0x2e, 0x43, 0x94, 0x58,
	0x6c, 0x50, 0x3f, 0x29, 0xb3, 0x9f, 0x11, 0x3c, 0xfd, 0xa0, 0x8a, 0xc5, 0x5f, 0x69, 0x56, 0xeb,
	0xd9, 0x0e, 0xf4, 0xf3, 0x1b, 0x55, 0x4b, 0x47, 0x97, 0xf7, 0x44, 0xe8, 0xd8, 0x1e, 0xc4, 0x06,
	0x8b, 0x4a, 0x57, 0x28, 0x1d, 0x0d, 0x27, 0x16, 0x2d, 0xc0, 0x5e, 0xc1, 0xa6, 0xc5, 0xc2, 0xa0,
	0xbb, 0x9c, 0xe7, 0x76, 0x9e, 0xf4, 0x88, 0x87, 0x06, 0x3a, 0xcb, 0xed, 0x3c, 0x3b, 0x86, 0xed,
	0x4e, 0x8a, 0x10, 0x7b, 0x17, 0x36, 0xfc, 0xcc, 0xdb, 0x14, 0x7d, 0xdf, 0x4e, 0xca, 0xf1, 0xaf,
	0x08, 0x40, 0x9c, 0x9f, 0x4e, 0x9b, 0x65, 0x60, 0x02, 0xe2, 0x29, 0xca, 0x92, 0x0e, 0xb3, 0xc3,
	0x51, 0x67, 0x71, 0xfe, 0xfb, 0xda, 0x69, 0xf6, 0x90, 0x24, 0xdc, 0xfd, 0x1e, 0xa0, 0x1d, 0x24,
	0xdb, 0xef, 0x9e, 0xf8, 0xe7, 0xf5, 0xd2, 0x83, 0x55, 0x74, 0x30, 0x3b, 0x83, 0xf8, 0xcf, 0xd7,
	0xb1, 0xbd, 0xae, 0xf8, 0xfe, 0xe8, 0xd3, 0xfd, 0x15, 0x6c, 0xe3, 0x74, 0x72, 0xf4, 0xf9, 0x35,
	0xbd, 0xc4, 0x1b, 0xeb, 0x4c, 0xb5, 0x40, 0xee, 0xac, 0x1e, 0x6b, 0xee, 0xf5, 0x68, 0x3a, 0x7f,
	0xcc, 0xac, 0x4f, 0x0b, 0xff, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x22, 0xf1, 0x3f,
	0x57, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCServiceClient is the client API for RPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCServiceClient interface {
	// SendToken — send token to other holder
	SendToken(ctx context.Context, in *TransferTokensRequest, opts ...grpc.CallOption) (*TransferTokensResponse, error)
	// IssueToken — Issue new token with given expiration data
	// sand return tokenID.
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error)
	// LockToken — Return hash of lock token for verify htlc and information
	// about transaction
	LockToken(ctx context.Context, in *LockTokenRequest, opts ...grpc.CallOption) (*LockTokenResponse, error)
}

type rPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCServiceClient(cc *grpc.ClientConn) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) SendToken(ctx context.Context, in *TransferTokensRequest, opts ...grpc.CallOption) (*TransferTokensResponse, error) {
	out := new(TransferTokensResponse)
	err := c.cc.Invoke(ctx, "/rpcservice.RPCService/SendToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error) {
	out := new(IssueTokenResponse)
	err := c.cc.Invoke(ctx, "/rpcservice.RPCService/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) LockToken(ctx context.Context, in *LockTokenRequest, opts ...grpc.CallOption) (*LockTokenResponse, error) {
	out := new(LockTokenResponse)
	err := c.cc.Invoke(ctx, "/rpcservice.RPCService/LockToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServiceServer is the server API for RPCService service.
type RPCServiceServer interface {
	// SendToken — send token to other holder
	SendToken(context.Context, *TransferTokensRequest) (*TransferTokensResponse, error)
	// IssueToken — Issue new token with given expiration data
	// sand return tokenID.
	IssueToken(context.Context, *IssueTokenRequest) (*IssueTokenResponse, error)
	// LockToken — Return hash of lock token for verify htlc and information
	// about transaction
	LockToken(context.Context, *LockTokenRequest) (*LockTokenResponse, error)
}

// UnimplementedRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServiceServer struct {
}

func (*UnimplementedRPCServiceServer) SendToken(ctx context.Context, req *TransferTokensRequest) (*TransferTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToken not implemented")
}
func (*UnimplementedRPCServiceServer) IssueToken(ctx context.Context, req *IssueTokenRequest) (*IssueTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedRPCServiceServer) LockToken(ctx context.Context, req *LockTokenRequest) (*LockTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockToken not implemented")
}

func RegisterRPCServiceServer(s *grpc.Server, srv RPCServiceServer) {
	s.RegisterService(&_RPCService_serviceDesc, srv)
}

func _RPCService_SendToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).SendToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcservice.RPCService/SendToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).SendToken(ctx, req.(*TransferTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcservice.RPCService/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_LockToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).LockToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcservice.RPCService/LockToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).LockToken(ctx, req.(*LockTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcservice.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToken",
			Handler:    _RPCService_SendToken_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _RPCService_IssueToken_Handler,
		},
		{
			MethodName: "LockToken",
			Handler:    _RPCService_LockToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/PRCSevice/rpcservice.proto",
}
