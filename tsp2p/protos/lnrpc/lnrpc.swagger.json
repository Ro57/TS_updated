{
  "swagger": "2.0",
  "info": {
    "title": "protos/lnrpc/lnrpc.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "ChannelCloseSummaryClosureType": {
      "type": "string",
      "enum": [
        "COOPERATIVE_CLOSE",
        "LOCAL_FORCE_CLOSE",
        "REMOTE_FORCE_CLOSE",
        "BREACH_CLOSE",
        "FUNDING_CANCELED",
        "ABANDONED"
      ],
      "default": "COOPERATIVE_CLOSE"
    },
    "ChannelEventUpdateUpdateType": {
      "type": "string",
      "enum": [
        "OPEN_CHANNEL",
        "CLOSED_CHANNEL",
        "ACTIVE_CHANNEL",
        "INACTIVE_CHANNEL",
        "PENDING_OPEN_CHANNEL"
      ],
      "default": "OPEN_CHANNEL"
    },
    "FailureFailureCode": {
      "type": "string",
      "enum": [
        "RESERVED",
        "INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS",
        "INCORRECT_PAYMENT_AMOUNT",
        "FINAL_INCORRECT_CLTV_EXPIRY",
        "FINAL_INCORRECT_HTLC_AMOUNT",
        "FINAL_EXPIRY_TOO_SOON",
        "INVALID_REALM",
        "EXPIRY_TOO_SOON",
        "INVALID_ONION_VERSION",
        "INVALID_ONION_HMAC",
        "INVALID_ONION_KEY",
        "AMOUNT_BELOW_MINIMUM",
        "FEE_INSUFFICIENT",
        "INCORRECT_CLTV_EXPIRY",
        "CHANNEL_DISABLED",
        "TEMPORARY_CHANNEL_FAILURE",
        "REQUIRED_NODE_FEATURE_MISSING",
        "REQUIRED_CHANNEL_FEATURE_MISSING",
        "UNKNOWN_NEXT_PEER",
        "TEMPORARY_NODE_FAILURE",
        "PERMANENT_NODE_FAILURE",
        "PERMANENT_CHANNEL_FAILURE",
        "EXPIRY_TOO_FAR",
        "MPP_TIMEOUT",
        "INTERNAL_FAILURE",
        "UNKNOWN_FAILURE",
        "UNREADABLE_FAILURE"
      ],
      "default": "RESERVED",
      "description": " - RESERVED: The numbers assigned in this enumeration match the failure codes as\ndefined in BOLT #4. Because protobuf 3 requires enums to start with 0,\na RESERVED value is added.\n - INTERNAL_FAILURE: An internal error occurred.\n - UNKNOWN_FAILURE: The error source is known, but the failure itself couldn't be decoded.\n - UNREADABLE_FAILURE: An unreadable failure result is returned if the received failure message\ncannot be decrypted. In that case the error source is unknown."
    },
    "ForceClosedChannelAnchorState": {
      "type": "string",
      "enum": [
        "LIMBO",
        "RECOVERED",
        "LOST"
      ],
      "default": "LIMBO"
    },
    "HTLCAttemptHTLCStatus": {
      "type": "string",
      "enum": [
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "IN_FLIGHT"
    },
    "InvoiceInvoiceState": {
      "type": "string",
      "enum": [
        "OPEN",
        "SETTLED",
        "CANCELED",
        "ACCEPTED"
      ],
      "default": "OPEN"
    },
    "PaymentPaymentStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "PeerEventEventType": {
      "type": "string",
      "enum": [
        "PEER_ONLINE",
        "PEER_OFFLINE"
      ],
      "default": "PEER_ONLINE"
    },
    "PeerSyncType": {
      "type": "string",
      "enum": [
        "UNKNOWN_SYNC",
        "ACTIVE_SYNC",
        "PASSIVE_SYNC"
      ],
      "default": "UNKNOWN_SYNC",
      "description": " - UNKNOWN_SYNC: Denotes that we cannot determine the peer's current sync type.\n - ACTIVE_SYNC: Denotes that we are actively receiving new graph updates from the peer.\n - PASSIVE_SYNC: Denotes that we are not receiving new graph updates from the peer."
    },
    "PendingChannelsResponseClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel to be closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "The transaction id of the closing transaction"
        }
      }
    },
    "PendingChannelsResponseCommitments": {
      "type": "object",
      "properties": {
        "local_txid": {
          "type": "string",
          "description": "Hash of the local version of the commitment tx."
        },
        "remote_txid": {
          "type": "string",
          "description": "Hash of the remote version of the commitment tx."
        },
        "remote_pending_txid": {
          "type": "string",
          "description": "Hash of the remote pending version of the commitment tx."
        },
        "local_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the local\ncommitment."
        },
        "remote_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the remote\ncommitment."
        },
        "remote_pending_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the remote\npending commitment."
        }
      }
    },
    "PendingChannelsResponseForceClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel to be force closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "The transaction id of the closing transaction"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in this pending channel"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "The height at which funds can be swept into the wallet"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "Remaining # of blocks until the commitment output can be swept.\nNegative values indicate how many blocks have passed since becoming\nmature."
        },
        "recovered_balance": {
          "type": "string",
          "format": "int64",
          "title": "The total value of funds successfully recovered from this channel"
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPendingHTLC"
          }
        },
        "anchor": {
          "$ref": "#/definitions/ForceClosedChannelAnchorState"
        }
      }
    },
    "PendingChannelsResponsePendingChannel": {
      "type": "object",
      "properties": {
        "remote_node_pub": {
          "type": "string"
        },
        "channel_point": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "local_balance": {
          "type": "string",
          "format": "int64"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64"
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum satoshis this node is required to reserve in its\nbalance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum satoshis the other node is required to reserve in its\nbalance."
        },
        "initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "The party that initiated opening the channel."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The commitment type used by this channel."
        }
      }
    },
    "PendingChannelsResponsePendingOpenChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel"
        },
        "confirmation_height": {
          "type": "integer",
          "format": "int64",
          "title": "The height at which this channel will be confirmed"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "The amount calculated to be paid in fees for the current set of\ncommitment transactions. The fee amount is persisted with the channel\nin order to allow the fee amount to be removed and recalculated with\neach channel state update, including updates that happen after a system\nrestart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "The required number of satoshis per kilo-weight that the requester will\npay at all times, for both the funding transaction and commitment\ntransaction. This value can later be updated once the channel is open."
        }
      }
    },
    "PendingChannelsResponseWaitingCloseChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel waiting for closing tx to confirm"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in this channel"
        },
        "commitments": {
          "$ref": "#/definitions/PendingChannelsResponseCommitments",
          "description": "A list of valid commitment transactions. Any of these can confirm at\nthis point."
        }
      }
    },
    "lnrpcAbandonChannelResponse": {
      "type": "object"
    },
    "lnrpcAddInvoiceResponse": {
      "type": "object",
      "properties": {
        "r_hash": {
          "type": "string",
          "format": "byte"
        },
        "payment_request": {
          "type": "string",
          "description": "A bare-bones invoice for a payment within the Lightning Network. With the\ndetails of the invoice, the sender has all the data necessary to send a\npayment to the recipient."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"add\" index of this invoice. Each newly created invoice will increment\nthis index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all added\ninvoices with an add_index greater than this one."
        }
      }
    },
    "lnrpcAddressType": {
      "type": "string",
      "enum": [
        "WITNESS_PUBKEY_HASH",
        "NESTED_PUBKEY_HASH",
        "UNUSED_WITNESS_PUBKEY_HASH",
        "UNUSED_NESTED_PUBKEY_HASH"
      ],
      "default": "WITNESS_PUBKEY_HASH",
      "description": "- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)\n- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)",
      "title": "`AddressType` has to be one of:"
    },
    "lnrpcAmount": {
      "type": "object",
      "properties": {
        "sat": {
          "type": "string",
          "format": "uint64",
          "description": "Value denominated in satoshis."
        },
        "msat": {
          "type": "string",
          "format": "uint64",
          "description": "Value denominated in milli-satoshis."
        }
      }
    },
    "lnrpcBakeMacaroonResponse": {
      "type": "object",
      "properties": {
        "macaroon": {
          "type": "string",
          "description": "The hex encoded macaroon, serialized in binary format."
        }
      }
    },
    "lnrpcChain": {
      "type": "object",
      "properties": {
        "chain": {
          "type": "string",
          "title": "The blockchain the node is on (eg bitcoin, litecoin)"
        },
        "network": {
          "type": "string",
          "title": "The network the node is on (eg regtest, testnet, mainnet)"
        }
      }
    },
    "lnrpcChanBackupSnapshot": {
      "type": "object",
      "properties": {
        "single_chan_backups": {
          "$ref": "#/definitions/lnrpcChannelBackups",
          "description": "The set of new channels that have been added since the last channel backup\nsnapshot was requested."
        },
        "multi_chan_backup": {
          "$ref": "#/definitions/lnrpcMultiChanBackup",
          "description": "A multi-channel backup that covers all open channels currently known to\nlnd."
        }
      }
    },
    "lnrpcChanPointShim": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "The size of the pre-crafted output to be used as the channel point for this\nchannel funding."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "The target channel point to refrence in created commitment transactions."
        },
        "local_key": {
          "$ref": "#/definitions/lnrpcKeyDescriptor",
          "description": "Our local key to use when creating the multi-sig output."
        },
        "remote_key": {
          "type": "string",
          "format": "byte",
          "description": "The key of the remote party to use when creating the multi-sig output."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "If non-zero, then this will be used as the pending channel ID on the wire\nprotocol to initate the funding request. This is an optional field, and\nshould only be set if the responder is already expecting a specific pending\nchannel ID."
        },
        "thaw_height": {
          "type": "integer",
          "format": "int64",
          "description": "This uint32 indicates if this channel is to be considered 'frozen'. A frozen\nchannel does not allow a cooperative channel close by the initiator. The\nthaw_height is the height that this restriction stops applying to the\nchannel. The height can be interpreted in two ways: as a relative height if\nthe value is less than 500,000, or as an absolute height otherwise."
        }
      }
    },
    "lnrpcChannel": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether this channel is active or not"
        },
        "remote_pubkey": {
          "type": "string",
          "title": "The identity pubkey of the remote node"
        },
        "channel_point": {
          "type": "string",
          "description": "The outpoint (txid:index) of the funding transaction. With this value, Bob\nwill be able to generate a signature for Alice's version of the commitment\ntransaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "The total amount of funds held in this channel"
        },
        "local_balance": {
          "type": "string",
          "format": "int64",
          "title": "This node's current balance in this channel"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64",
          "title": "The counterparty's current balance in this channel"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "The amount calculated to be paid in fees for the current set of commitment\ntransactions. The fee amount is persisted with the channel in order to\nallow the fee amount to be removed and recalculated with each channel state\nupdate, including updates that happen after a system restart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "The required number of satoshis per kilo-weight that the requester will pay\nat all times, for both the funding transaction and commitment transaction.\nThis value can later be updated once the channel is open."
        },
        "unsettled_balance": {
          "type": "string",
          "format": "int64",
          "title": "The unsettled balance in this channel"
        },
        "total_satoshis_sent": {
          "type": "string",
          "format": "int64",
          "description": "The total number of satoshis we've sent within this channel."
        },
        "total_satoshis_received": {
          "type": "string",
          "format": "int64",
          "description": "The total number of satoshis we've received within this channel."
        },
        "num_updates": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of updates conducted within this channel."
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLC"
          },
          "description": "The list of active, uncleared HTLCs currently pending within the channel."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "Deprecated. The CSV delay expressed in relative blocks. If the channel is\nforce closed, we will need to wait for this many blocks before we can regain\nour funds."
        },
        "private": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether this channel is advertised to the network or not."
        },
        "initiator": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if we were the ones that created the channel."
        },
        "chan_status_flags": {
          "type": "string",
          "description": "A set of flags showing the current state of the channel."
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated. The minimum satoshis this node is required to reserve in its\nbalance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated. The minimum satoshis the other node is required to reserve in\nits balance."
        },
        "static_remote_key": {
          "type": "boolean",
          "format": "boolean",
          "description": "Deprecated. Use commitment_type."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The commitment type used by this channel."
        },
        "lifetime": {
          "type": "string",
          "format": "int64",
          "description": "The number of seconds that the channel has been monitored by the channel\nscoring system. Scores are currently not persisted, so this value may be\nless than the lifetime of the channel [EXPERIMENTAL]."
        },
        "uptime": {
          "type": "string",
          "format": "int64",
          "description": "The number of seconds that the remote peer has been observed as being online\nby the channel scoring system over the lifetime of the channel\n[EXPERIMENTAL]."
        },
        "close_address": {
          "type": "string",
          "description": "Close address is the address that we will enforce payout to on cooperative\nclose if the channel was opened utilizing option upfront shutdown. This\nvalue can be set on channel open by setting close_address in an open channel\nrequest. If this value is not set, you can still choose a payout address by\ncooperatively closing with the delivery_address field set."
        },
        "push_amount_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount that the initiator of the channel optionally pushed to the remote\nparty on channel open. This amount will be zero if the channel initiator did\nnot push any funds to the remote peer. If the initiator field is true, we\npushed this amount to our peer, if it is false, the remote peer pushed this\namount to us."
        },
        "thaw_height": {
          "type": "integer",
          "format": "int64",
          "description": "This uint32 indicates if this channel is to be considered 'frozen'. A\nfrozen channel doest not allow a cooperative channel close by the\ninitiator. The thaw_height is the height that this restriction stops\napplying to the channel. This field is optional, not setting it or using a\nvalue of zero will mean the channel has no additional restrictions. The\nheight can be interpreted in two ways: as a relative height if the value is\nless than 500,000, or as an absolute height otherwise."
        },
        "local_constraints": {
          "$ref": "#/definitions/lnrpcChannelConstraints",
          "description": "List constraints for the local node."
        },
        "remote_constraints": {
          "$ref": "#/definitions/lnrpcChannelConstraints",
          "description": "List constraints for the remote node."
        }
      }
    },
    "lnrpcChannelAcceptRequest": {
      "type": "object",
      "properties": {
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey of the node that wishes to open an inbound channel."
        },
        "chain_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the genesis block that the proposed channel resides in."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel id."
        },
        "funding_amt": {
          "type": "string",
          "format": "uint64",
          "description": "The funding amount in satoshis that initiator wishes to use in the\nchannel."
        },
        "push_amt": {
          "type": "string",
          "format": "uint64",
          "description": "The push amount of the proposed channel in millisatoshis."
        },
        "dust_limit": {
          "type": "string",
          "format": "uint64",
          "description": "The dust limit of the initiator's commitment tx."
        },
        "max_value_in_flight": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of coins in millisatoshis that can be pending in this\nchannel."
        },
        "channel_reserve": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum amount of satoshis the initiator requires us to have at all\ntimes."
        },
        "min_htlc": {
          "type": "string",
          "format": "uint64",
          "description": "The smallest HTLC in millisatoshis that the initiator will accept."
        },
        "fee_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "The initial fee rate that the initiator suggests for both commitment\ntransactions."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The number of blocks to use for the relative time lock in the pay-to-self\noutput of both commitment transactions."
        },
        "max_accepted_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of incoming HTLC's that the initiator will accept."
        },
        "channel_flags": {
          "type": "integer",
          "format": "int64",
          "description": "A bit-field which the initiator uses to specify proposed channel\nbehavior."
        }
      }
    },
    "lnrpcChannelBackup": {
      "type": "object",
      "properties": {
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "Identifies the channel that this backup belongs to."
        },
        "chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "Is an encrypted single-chan backup. this can be passed to\nRestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in\norder to trigger the recovery protocol. When using REST, this field must be\nencoded as base64."
        }
      }
    },
    "lnrpcChannelBackups": {
      "type": "object",
      "properties": {
        "chan_backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelBackup"
          },
          "description": "A set of single-chan static channel backups."
        }
      }
    },
    "lnrpcChannelBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated. Sum of channels balances denominated in satoshis"
        },
        "pending_open_balance": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated. Sum of channels pending balances denominated in satoshis"
        },
        "local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels local balances."
        },
        "remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels remote balances."
        },
        "unsettled_local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels local unsettled balances."
        },
        "unsettled_remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels remote unsettled balances."
        },
        "pending_open_local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels pending local balances."
        },
        "pending_open_remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels pending remote balances."
        }
      }
    },
    "lnrpcChannelCloseSummary": {
      "type": "object",
      "properties": {
        "channel_point": {
          "type": "string",
          "description": "The outpoint (txid:index) of the funding transaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel."
        },
        "chain_hash": {
          "type": "string",
          "description": "The hash of the genesis block that this channel resides within."
        },
        "closing_tx_hash": {
          "type": "string",
          "description": "The txid of the transaction which ultimately closed this channel."
        },
        "remote_pubkey": {
          "type": "string",
          "description": "Public key of the remote peer that we formerly had a channel with."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "description": "Total capacity of the channel."
        },
        "close_height": {
          "type": "integer",
          "format": "int64",
          "description": "Height at which the funding transaction was spent."
        },
        "settled_balance": {
          "type": "string",
          "format": "int64",
          "title": "Settled balance at the time of channel closure"
        },
        "time_locked_balance": {
          "type": "string",
          "format": "int64",
          "title": "The sum of all the time-locked outputs at the time of channel closure"
        },
        "close_type": {
          "$ref": "#/definitions/ChannelCloseSummaryClosureType",
          "description": "Details on how the channel was closed."
        },
        "open_initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "Open initiator is the party that initiated opening the channel. Note that\nthis value may be unknown if the channel was closed before we migrated to\nstore open channel information after close."
        },
        "close_initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "Close initiator indicates which party initiated the close. This value will\nbe unknown for channels that were cooperatively closed before we started\ntracking cooperative close initiators. Note that this indicates which party\ninitiated a close, and it is possible for both to initiate cooperative or\nforce closes, although only one party's close will be confirmed on chain."
        },
        "resolutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcResolution"
          }
        }
      }
    },
    "lnrpcChannelCloseUpdate": {
      "type": "object",
      "properties": {
        "closing_txid": {
          "type": "string",
          "format": "byte"
        },
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "lnrpcChannelConstraints": {
      "type": "object",
      "properties": {
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The CSV delay expressed in relative blocks. If the channel is force closed,\nwe will need to wait for this many blocks before we can regain our funds."
        },
        "chan_reserve_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum satoshis this node is required to reserve in its balance."
        },
        "dust_limit_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The dust limit (in satoshis) of the initiator's commitment tx."
        },
        "max_pending_amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of coins in millisatoshis that can be pending in this\nchannel."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The smallest HTLC in millisatoshis that the initiator will accept."
        },
        "max_accepted_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of incoming HTLC's that the initiator will accept."
        }
      }
    },
    "lnrpcChannelEdge": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_point": {
          "type": "string"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "node1_pub": {
          "type": "string"
        },
        "node2_pub": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "node1_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "node2_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        }
      },
      "description": "A fully authenticated channel along with all its unique attributes.\nOnce an authenticated channel announcement has been processed on the network,\nthen an instance of ChannelEdgeInfo encapsulating the channels attributes is\nstored. The other portions relevant to routing policy of a channel are stored\nwithin a ChannelEdgePolicy for each direction of the channel."
    },
    "lnrpcChannelEdgeUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "routing_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "advertising_node": {
          "type": "string"
        },
        "connecting_node": {
          "type": "string"
        }
      }
    },
    "lnrpcChannelEventUpdate": {
      "type": "object",
      "properties": {
        "open_channel": {
          "$ref": "#/definitions/lnrpcChannel"
        },
        "closed_channel": {
          "$ref": "#/definitions/lnrpcChannelCloseSummary"
        },
        "active_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "inactive_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "pending_open_channel": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "type": {
          "$ref": "#/definitions/ChannelEventUpdateUpdateType"
        }
      }
    },
    "lnrpcChannelFeeReport": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The short channel id that this fee report belongs to."
        },
        "channel_point": {
          "type": "string",
          "description": "The channel that this fee report belongs to."
        },
        "base_fee_msat": {
          "type": "string",
          "format": "int64",
          "description": "The base fee charged regardless of the number of milli-satoshis sent."
        },
        "fee_per_mil": {
          "type": "string",
          "format": "int64",
          "description": "The amount charged per milli-satoshis transferred expressed in\nmillionths of a satoshi."
        },
        "fee_rate": {
          "type": "number",
          "format": "double",
          "description": "The effective fee rate in milli-satoshis. Computed by dividing the\nfee_per_mil value by 1 million."
        }
      }
    },
    "lnrpcChannelGraph": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcLightningNode"
          },
          "title": "The list of `LightningNode`s in this channel graph"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "title": "The list of `ChannelEdge`s in this channel graph"
        }
      },
      "description": "Returns a new instance of the directed channel graph."
    },
    "lnrpcChannelOpenUpdate": {
      "type": "object",
      "properties": {
        "channel_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcChannelPoint": {
      "type": "object",
      "properties": {
        "funding_txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "Txid of the funding transaction. When using REST, this field must be\nencoded as base64."
        },
        "funding_txid_str": {
          "type": "string",
          "description": "Hex-encoded string representing the byte-reversed hash of the funding\ntransaction."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "title": "The index of the output of the funding transaction"
        }
      }
    },
    "lnrpcChannelUpdate": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "The signature that validates the announced data and proves the ownership\nof node id."
        },
        "chain_hash": {
          "type": "string",
          "format": "byte",
          "description": "The target chain that this channel was opened within. This value\nshould be the genesis hash of the target chain. Along with the short\nchannel ID, this uniquely identifies the channel globally in a\nblockchain."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique description of the funding transaction."
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp that allows ordering in the case of multiple announcements.\nWe should ignore the message if timestamp is not greater than the\nlast-received."
        },
        "message_flags": {
          "type": "integer",
          "format": "int64",
          "description": "The bitfield that describes whether optional fields are present in this\nupdate. Currently, the least-significant bit must be set to 1 if the\noptional field MaxHtlc is present."
        },
        "channel_flags": {
          "type": "integer",
          "format": "int64",
          "description": "The bitfield that describes additional meta-data concerning how the\nupdate is to be interpreted. Currently, the least-significant bit must be\nset to 0 if the creating node corresponds to the first node in the\npreviously sent channel announcement and 1 otherwise. If the second bit\nis set, then the channel is set to be disabled."
        },
        "time_lock_delta": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of blocks this node requires to be added to the expiry\nof HTLCs. This is a security parameter determined by the node operator.\nThis value represents the required gap between the time locks of the\nincoming and outgoing HTLC's set to this node."
        },
        "htlc_minimum_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum HTLC value which will be accepted."
        },
        "base_fee": {
          "type": "integer",
          "format": "int64",
          "description": "The base fee that must be used for incoming HTLC's to this particular\nchannel. This value will be tacked onto the required for a payment\nindependent of the size of the payment."
        },
        "fee_rate": {
          "type": "integer",
          "format": "int64",
          "description": "The fee rate that will be charged per millionth of a satoshi."
        },
        "htlc_maximum_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum HTLC value which will be accepted."
        },
        "extra_opaque_data": {
          "type": "string",
          "format": "byte",
          "description": "The set of data that was appended to this message, some of which we may\nnot actually know how to iterate or parse. By holding onto this data, we\nensure that we're able to properly validate the set of signatures that\ncover these new fields, and ensure we're able to make upgrades to the\nnetwork in a forwards compatible manner."
        }
      }
    },
    "lnrpcCloseStatusUpdate": {
      "type": "object",
      "properties": {
        "close_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "chan_close": {
          "$ref": "#/definitions/lnrpcChannelCloseUpdate"
        }
      }
    },
    "lnrpcClosedChannelUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "closed_height": {
          "type": "integer",
          "format": "int64"
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcClosedChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelCloseSummary"
          }
        }
      }
    },
    "lnrpcCommitmentType": {
      "type": "string",
      "enum": [
        "LEGACY",
        "STATIC_REMOTE_KEY",
        "ANCHORS",
        "UNKNOWN_COMMITMENT_TYPE"
      ],
      "default": "LEGACY",
      "description": " - LEGACY: A channel using the legacy commitment format having tweaked to_remote\nkeys.\n - STATIC_REMOTE_KEY: A channel that uses the modern commitment format where the key in the\noutput of the remote party does not change each state. This makes back\nup and recovery easier as when the channel is closed, the funds go\ndirectly to that key.\n - ANCHORS: A channel that uses a commitment format that has anchor outputs on the\ncommitments, allowing fee bumping after a force close transaction has\nbeen broadcast.\n - UNKNOWN_COMMITMENT_TYPE: Returned when the commitment type isn't known or unavailable."
    },
    "lnrpcConnectPeerResponse": {
      "type": "object"
    },
    "lnrpcDebugLevelResponse": {
      "type": "object",
      "properties": {
        "sub_systems": {
          "type": "string"
        }
      }
    },
    "lnrpcDeleteAllPaymentsResponse": {
      "type": "object"
    },
    "lnrpcDeleteMacaroonIDResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "format": "boolean",
          "description": "A boolean indicates that the deletion is successful."
        }
      }
    },
    "lnrpcDisconnectPeerResponse": {
      "type": "object"
    },
    "lnrpcEdgeLocator": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "The short channel id of this edge."
        },
        "direction_reverse": {
          "type": "boolean",
          "format": "boolean",
          "description": "The direction of this edge. If direction_reverse is false, the direction\nof this edge is from the channel endpoint with the lexicographically smaller\npub key to the endpoint with the larger pub key. If direction_reverse is\nis true, the edge goes the other way."
        }
      }
    },
    "lnrpcEstimateFeeResponse": {
      "type": "object",
      "properties": {
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "description": "The total fee in satoshis."
        },
        "feerate_sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "The fee rate in satoshi/byte."
        }
      }
    },
    "lnrpcFailure": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/FailureFailureCode",
          "title": "Failure code as defined in the Lightning spec"
        },
        "channel_update": {
          "$ref": "#/definitions/lnrpcChannelUpdate",
          "description": "An optional channel update message."
        },
        "htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "A failure type-dependent htlc value."
        },
        "onion_sha_256": {
          "type": "string",
          "format": "byte",
          "description": "The sha256 sum of the onion payload."
        },
        "cltv_expiry": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent cltv expiry value."
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent flags value."
        },
        "failure_source_index": {
          "type": "integer",
          "format": "int64",
          "description": "The position in the path of the intermediate or final node that generated\nthe failure message. Position zero is the sender node."
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent block height."
        }
      }
    },
    "lnrpcFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "is_required": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_known": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "lnrpcFeatureBit": {
      "type": "string",
      "enum": [
        "DATALOSS_PROTECT_REQ",
        "DATALOSS_PROTECT_OPT",
        "INITIAL_ROUING_SYNC",
        "UPFRONT_SHUTDOWN_SCRIPT_REQ",
        "UPFRONT_SHUTDOWN_SCRIPT_OPT",
        "GOSSIP_QUERIES_REQ",
        "GOSSIP_QUERIES_OPT",
        "TLV_ONION_REQ",
        "TLV_ONION_OPT",
        "EXT_GOSSIP_QUERIES_REQ",
        "EXT_GOSSIP_QUERIES_OPT",
        "STATIC_REMOTE_KEY_REQ",
        "STATIC_REMOTE_KEY_OPT",
        "PAYMENT_ADDR_REQ",
        "PAYMENT_ADDR_OPT",
        "MPP_REQ",
        "MPP_OPT"
      ],
      "default": "DATALOSS_PROTECT_REQ"
    },
    "lnrpcFeeLimit": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a fixed amount of satoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "fixed_msat": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a fixed amount of millisatoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "percent": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a percentage of the payment amount."
        }
      }
    },
    "lnrpcFeeReportResponse": {
      "type": "object",
      "properties": {
        "channel_fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelFeeReport"
          },
          "description": "An array of channel fee reports which describes the current fee schedule\nfor each channel."
        },
        "day_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 24 hrs."
        },
        "week_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 1 week."
        },
        "month_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 1 month."
        }
      }
    },
    "lnrpcFloatMetric": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "Arbitrary float value."
        },
        "normalized_value": {
          "type": "number",
          "format": "double",
          "description": "The value normalized to [0,1] or [-1,1]."
        }
      }
    },
    "lnrpcForwardingEvent": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "Timestamp is the time (unix epoch offset) that this circuit was\ncompleted."
        },
        "chan_id_in": {
          "type": "string",
          "format": "uint64",
          "description": "The incoming channel ID that carried the HTLC that created the circuit."
        },
        "chan_id_out": {
          "type": "string",
          "format": "uint64",
          "description": "The outgoing channel ID that carried the preimage that completed the\ncircuit."
        },
        "amt_in": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in satoshis) of the incoming HTLC that created half\nthe circuit."
        },
        "amt_out": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in satoshis) of the outgoing HTLC that created the\nsecond half of the circuit."
        },
        "fee": {
          "type": "string",
          "format": "uint64",
          "description": "The total fee (in satoshis) that this payment circuit carried."
        },
        "fee_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total fee (in milli-satoshis) that this payment circuit carried."
        },
        "amt_in_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in milli-satoshis) of the incoming HTLC that created\nhalf the circuit."
        },
        "amt_out_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in milli-satoshis) of the outgoing HTLC that created\nthe second half of the circuit."
        }
      }
    },
    "lnrpcForwardingHistoryResponse": {
      "type": "object",
      "properties": {
        "forwarding_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcForwardingEvent"
          },
          "description": "A list of forwarding events from the time slice of the time series\nspecified in the request."
        },
        "last_offset_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the last time in the set of returned forwarding events. Can\nbe used to seek further, pagination style."
        }
      }
    },
    "lnrpcFundingPsbtFinalize": {
      "type": "object",
      "properties": {
        "signed_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded PSBT that contains all witness data to send the exact channel\ncapacity amount to the PK script returned in the open channel message in a\nprevious step. Cannot be set at the same time as final_raw_tx."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to get the PSBT for."
        },
        "final_raw_tx": {
          "type": "string",
          "format": "byte",
          "description": "As an alternative to the signed PSBT with all witness data, the final raw\nwire format transaction can also be specified directly. Cannot be set at the\nsame time as signed_psbt."
        }
      }
    },
    "lnrpcFundingPsbtVerify": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded but not yet signed PSBT that sends the exact channel capacity\namount to the PK script returned in the open channel message in a previous\nstep."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to get the PSBT for."
        }
      }
    },
    "lnrpcFundingShim": {
      "type": "object",
      "properties": {
        "chan_point_shim": {
          "$ref": "#/definitions/lnrpcChanPointShim",
          "description": "A channel shim where the channel point was fully constructed outside\nof lnd's wallet and the transaction might already be published."
        },
        "psbt_shim": {
          "$ref": "#/definitions/lnrpcPsbtShim",
          "description": "A channel shim that uses a PSBT to fund and sign the channel funding\ntransaction."
        }
      }
    },
    "lnrpcFundingShimCancel": {
      "type": "object",
      "properties": {
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to cancel the funding shim for."
        }
      }
    },
    "lnrpcFundingStateStepResp": {
      "type": "object"
    },
    "lnrpcGetAddressBalancesResponse": {
      "type": "object",
      "properties": {
        "addrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcGetAddressBalancesResponseAddr"
          }
        }
      }
    },
    "lnrpcGetAddressBalancesResponseAddr": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The address which has this balance"
        },
        "total": {
          "type": "number",
          "format": "double",
          "title": "Total balance in coins"
        },
        "stotal": {
          "type": "string",
          "format": "int64",
          "title": "Total balance (atomic units)"
        },
        "spendable": {
          "type": "number",
          "format": "double",
          "title": "Balance which is currently spendable (coins)"
        },
        "sspendable": {
          "type": "string",
          "format": "int64",
          "title": "Balance which is currently spendable (atomic units)"
        },
        "immaturereward": {
          "type": "number",
          "format": "double",
          "title": "Mined coins which have not yet matured (coins)"
        },
        "simmaturereward": {
          "type": "string",
          "format": "int64",
          "title": "Mined coins which have not yet matured (atomic units)"
        },
        "unconfirmed": {
          "type": "number",
          "format": "double",
          "title": "Unconfirmed balance in coins"
        },
        "sunconfirmed": {
          "type": "string",
          "format": "int64",
          "title": "Unconfirmed balance in atomic units"
        },
        "outputcount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of transaction outputs which make up the balance"
        }
      }
    },
    "lnrpcGetInfoResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the LND software that the node is running."
        },
        "commit_hash": {
          "type": "string",
          "description": "The SHA1 commit hash that the daemon is compiled with."
        },
        "identity_pubkey": {
          "type": "string",
          "description": "The identity pubkey of the current node."
        },
        "alias": {
          "type": "string",
          "title": "If applicable, the alias of the current node, e.g. \"bob\""
        },
        "color": {
          "type": "string",
          "title": "The color of the current node in hex code format"
        },
        "num_pending_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of pending channels"
        },
        "num_active_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of active channels"
        },
        "num_inactive_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of inactive channels"
        },
        "num_peers": {
          "type": "integer",
          "format": "int64",
          "title": "Number of peers"
        },
        "block_height": {
          "type": "integer",
          "format": "int64",
          "title": "The node's current view of the height of the best block"
        },
        "block_hash": {
          "type": "string",
          "title": "The node's current view of the hash of the best block"
        },
        "best_header_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of the block best known to the wallet"
        },
        "synced_to_chain": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the wallet's view is synced to the main chain"
        },
        "synced_to_graph": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether we consider ourselves synced with the public channel graph."
        },
        "testnet": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the current node is connected to testnet. This field is\ndeprecated and the network field should be used instead"
        },
        "chains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChain"
          },
          "title": "A list of active chains the node is connected to"
        },
        "uris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The URIs of the current node."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features that our node has advertised in our init message, node\nannouncements and invoices."
        }
      }
    },
    "lnrpcGetRecoveryInfoResponse": {
      "type": "object",
      "properties": {
        "recovery_mode": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the wallet is in recovery mode"
        },
        "recovery_finished": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the wallet recovery progress is finished"
        },
        "progress": {
          "type": "number",
          "format": "double",
          "description": "The recovery progress, ranging from 0 to 1."
        }
      }
    },
    "lnrpcGraphTopologyUpdate": {
      "type": "object",
      "properties": {
        "node_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeUpdate"
          }
        },
        "channel_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdgeUpdate"
          }
        },
        "closed_chans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcClosedChannelUpdate"
          }
        }
      }
    },
    "lnrpcHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean",
          "format": "boolean"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "hash_lock": {
          "type": "string",
          "format": "byte"
        },
        "expiration_height": {
          "type": "integer",
          "format": "int64"
        },
        "htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the channel."
        },
        "forwarding_channel": {
          "type": "string",
          "format": "uint64",
          "description": "If this HTLC is involved in a forwarding operation, this field indicates\nthe forwarding channel. For an outgoing htlc, it is the incoming channel.\nFor an incoming htlc, it is the outgoing channel. When the htlc\noriginates from this node or this node is the final destination,\nforwarding_channel will be zero. The forwarding channel will also be zero\nfor htlcs that need to be forwarded but don't have a forwarding decision\npersisted yet."
        },
        "forwarding_htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the forwarding channel."
        }
      }
    },
    "lnrpcHTLCAttempt": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HTLCAttemptHTLCStatus",
          "description": "The status of the HTLC."
        },
        "route": {
          "$ref": "#/definitions/lnrpcRoute",
          "description": "The route taken by this HTLC."
        },
        "attempt_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which this HTLC was sent."
        },
        "resolve_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which this HTLC was settled or failed.\nThis value will not be set if the HTLC is still IN_FLIGHT."
        },
        "failure": {
          "$ref": "#/definitions/lnrpcFailure",
          "description": "Detailed htlc failure info."
        },
        "preimage": {
          "type": "string",
          "format": "byte",
          "description": "The preimage that was used to settle the HTLC."
        }
      }
    },
    "lnrpcHop": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_capacity": {
          "type": "string",
          "format": "int64"
        },
        "amt_to_forward": {
          "type": "string",
          "format": "int64"
        },
        "fee": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "integer",
          "format": "int64"
        },
        "amt_to_forward_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64"
        },
        "pub_key": {
          "type": "string",
          "description": "An optional public key of the hop. If the public key is given, the payment\ncan be executed without relying on a copy of the channel graph."
        },
        "tlv_payload": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set to true, then this hop will be encoded using the new variable length\nTLV format. Note that if any custom tlv_records below are specified, then\nthis field MUST be set to true for them to be encoded properly."
        },
        "mpp_record": {
          "$ref": "#/definitions/lnrpcMPPRecord",
          "description": "An optional TLV record that signals the use of an MPP payment. If present,\nthe receiver will enforce that that the same mpp_record is included in the\nfinal hop payload of all non-zero payments in the HTLC set. If empty, a\nregular single-shot payment is or was attempted."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "An optional set of key-value TLV records. This is useful within the context\nof the SendToRoute call as it allows callers to specify arbitrary K-V pairs\nto drop off at each hop within the onion."
        }
      }
    },
    "lnrpcHopHint": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "description": "The public key of the node at the start of the channel."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique identifier of the channel."
        },
        "fee_base_msat": {
          "type": "integer",
          "format": "int64",
          "description": "The base fee of the channel denominated in millisatoshis."
        },
        "fee_proportional_millionths": {
          "type": "integer",
          "format": "int64",
          "description": "The fee rate of the channel for sending one satoshi across it denominated in\nmillionths of a satoshi."
        },
        "cltv_expiry_delta": {
          "type": "integer",
          "format": "int64",
          "description": "The time-lock delta of the channel."
        }
      }
    },
    "lnrpcInitiator": {
      "type": "string",
      "enum": [
        "INITIATOR_UNKNOWN",
        "INITIATOR_LOCAL",
        "INITIATOR_REMOTE",
        "INITIATOR_BOTH"
      ],
      "default": "INITIATOR_UNKNOWN"
    },
    "lnrpcInvoice": {
      "type": "object",
      "properties": {
        "memo": {
          "type": "string",
          "description": "An optional memo to attach along with the invoice. Used for record keeping\npurposes for the invoice's creator, and will also be set in the description\nfield of the encoded payment request if the description_hash field is not\nbeing used."
        },
        "r_preimage": {
          "type": "string",
          "format": "byte",
          "description": "The hex-encoded preimage (32 byte) which will allow settling an incoming\nHTLC payable to this preimage. When using REST, this field must be encoded\nas base64."
        },
        "r_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the preimage. When using REST, this field must be encoded as\nbase64."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "The value of this invoice in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "The value of this invoice in millisatoshis"
        },
        "settled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether this invoice has been fulfilled"
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "When this invoice was created"
        },
        "settle_date": {
          "type": "string",
          "format": "int64",
          "title": "When this invoice was settled"
        },
        "payment_request": {
          "type": "string",
          "description": "A bare-bones invoice for a payment within the Lightning Network. With the\ndetails of the invoice, the sender has all the data necessary to send a\npayment to the recipient."
        },
        "description_hash": {
          "type": "string",
          "format": "byte",
          "description": "Hash (SHA-256) of a description of the payment. Used if the description of\npayment (memo) is too long to naturally fit within the description field\nof an encoded payment request. When using REST, this field must be encoded\nas base64."
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "description": "Payment request expiry time in seconds. Default is 3600 (1 hour)."
        },
        "fallback_addr": {
          "type": "string",
          "description": "Fallback on-chain address."
        },
        "cltv_expiry": {
          "type": "string",
          "format": "uint64",
          "description": "Delta to use for the time-lock of the CLTV extended to the final hop."
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          },
          "description": "Route hints that can each be individually used to assist in reaching the\ninvoice's destination."
        },
        "private": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether this invoice should include routing hints for private channels."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"add\" index of this invoice. Each newly created invoice will increment\nthis index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all added\ninvoices with an add_index greater than this one."
        },
        "settle_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"settle\" index of this invoice. Each newly settled invoice will\nincrement this index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all\nsettled invoices with an settle_index greater than this one."
        },
        "amt_paid": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use amt_paid_sat or amt_paid_msat."
        },
        "amt_paid_sat": {
          "type": "string",
          "format": "int64",
          "description": "The amount that was accepted for this invoice, in satoshis. This will ONLY\nbe set if this invoice has been settled. We provide this field as if the\ninvoice was created with a zero value, then we need to record what amount\nwas ultimately accepted. Additionally, it's possible that the sender paid\nMORE that was specified in the original invoice. So we'll record that here\nas well."
        },
        "amt_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "The amount that was accepted for this invoice, in millisatoshis. This will\nONLY be set if this invoice has been settled. We provide this field as if\nthe invoice was created with a zero value, then we need to record what\namount was ultimately accepted. Additionally, it's possible that the sender\npaid MORE that was specified in the original invoice. So we'll record that\nhere as well."
        },
        "state": {
          "$ref": "#/definitions/InvoiceInvoiceState",
          "description": "The state the invoice is in."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoiceHTLC"
          },
          "description": "List of HTLCs paying to this invoice [EXPERIMENTAL]."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "List of features advertised on the invoice."
        },
        "is_keysend": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates if this invoice was a spontaneous payment that arrived via keysend\n[EXPERIMENTAL]."
        }
      }
    },
    "lnrpcInvoiceHTLC": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "Short channel id over which the htlc was received."
        },
        "htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the channel."
        },
        "amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of the htlc in msat."
        },
        "accept_height": {
          "type": "integer",
          "format": "int32",
          "description": "Block height at which this htlc was accepted."
        },
        "accept_time": {
          "type": "string",
          "format": "int64",
          "description": "Time at which this htlc was accepted."
        },
        "resolve_time": {
          "type": "string",
          "format": "int64",
          "description": "Time at which this htlc was settled or canceled."
        },
        "expiry_height": {
          "type": "integer",
          "format": "int32",
          "description": "Block height at which this htlc expires."
        },
        "state": {
          "$ref": "#/definitions/lnrpcInvoiceHTLCState",
          "description": "Current state the htlc is in."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "Custom tlv records."
        },
        "mpp_total_amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of the mpp payment in msat."
        }
      },
      "title": "Details of an HTLC that paid to an invoice"
    },
    "lnrpcInvoiceHTLCState": {
      "type": "string",
      "enum": [
        "ACCEPTED",
        "SETTLED",
        "CANCELED"
      ],
      "default": "ACCEPTED"
    },
    "lnrpcKeyDescriptor": {
      "type": "object",
      "properties": {
        "raw_key_bytes": {
          "type": "string",
          "format": "byte",
          "description": "The raw bytes of the key being identified."
        },
        "key_loc": {
          "$ref": "#/definitions/lnrpcKeyLocator",
          "description": "The key locator that identifies which key to use for signing."
        }
      }
    },
    "lnrpcKeyLocator": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int32",
          "description": "The family of key being identified."
        },
        "key_index": {
          "type": "integer",
          "format": "int32",
          "description": "The precise index of the key being identified."
        }
      }
    },
    "lnrpcLightningAddress": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "title": "The identity pubkey of the Lightning node"
        },
        "host": {
          "type": "string",
          "title": "The network location of the lightning node, e.g. `69.69.69.69:1337` or\n`localhost:10011`"
        }
      }
    },
    "lnrpcLightningNode": {
      "type": "object",
      "properties": {
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "pub_key": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeAddress"
          }
        },
        "color": {
          "type": "string"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      },
      "description": "An individual vertex/node within the channel graph. A node is\nconnected to other nodes by one or more channel edges emanating from it. As the\ngraph is directed, a node will also have an incoming edge attached to it for\neach outgoing edge."
    },
    "lnrpcListChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannel"
          },
          "title": "The list of active channels"
        }
      }
    },
    "lnrpcListInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoice"
          },
          "description": "A list of invoices from the time slice of the time series specified in the\nrequest."
        },
        "last_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned invoices. This can be used\nto seek further, pagination style."
        },
        "first_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned invoices. This can be used\nto seek backwards, pagination style."
        }
      }
    },
    "lnrpcListMacaroonIDsResponse": {
      "type": "object",
      "properties": {
        "root_key_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The list of root key IDs that are in use."
        }
      }
    },
    "lnrpcListPaymentsResponse": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPayment"
          },
          "title": "The list of payments"
        },
        "first_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the first item in the set of returned payments. This can be\nused as the index_offset to continue seeking backwards in the next request."
        },
        "last_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned payments. This can be used\nas the index_offset to continue seeking forwards in the next request."
        }
      }
    },
    "lnrpcListPeersResponse": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPeer"
          },
          "title": "The list of currently connected peers"
        }
      }
    },
    "lnrpcListPermissionsResponse": {
      "type": "object",
      "properties": {
        "method_permissions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcMacaroonPermissionList"
          },
          "description": "A map between all RPC method URIs and their required macaroon permissions to\naccess them."
        }
      }
    },
    "lnrpcListUnspentResponse": {
      "type": "object",
      "properties": {
        "utxos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcUtxo"
          },
          "title": "A list of utxos"
        }
      }
    },
    "lnrpcMPPRecord": {
      "type": "object",
      "properties": {
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "A unique, random identifier used to authenticate the sender as the intended\npayer of a multi-path payment. The payment_addr must be the same for all\nsubpayments, and match the payment_addr provided in the receiver's invoice.\nThe same payment_addr must be used on all subpayments."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total amount in milli-satoshis being sent as part of a larger multi-path\npayment. The caller is responsible for ensuring subpayments to the same node\nand payment_hash sum exactly to total_amt_msat. The same\ntotal_amt_msat must be used on all subpayments."
        }
      }
    },
    "lnrpcMacaroonPermission": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "The entity a permission grants access to."
        },
        "action": {
          "type": "string",
          "description": "The action that is granted."
        }
      }
    },
    "lnrpcMacaroonPermissionList": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcMacaroonPermission"
          },
          "description": "A list of macaroon permissions."
        }
      }
    },
    "lnrpcMultiChanBackup": {
      "type": "object",
      "properties": {
        "chan_points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelPoint"
          },
          "description": "Is the set of all channels that are included in this multi-channel backup."
        },
        "multi_chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "A single encrypted blob containing all the static channel backups of the\nchannel listed above. This can be stored as a single file or blob, and\nsafely be replaced with any prior/future versions. When using REST, this\nfield must be encoded as base64."
        }
      }
    },
    "lnrpcNetworkInfo": {
      "type": "object",
      "properties": {
        "graph_diameter": {
          "type": "integer",
          "format": "int64"
        },
        "avg_out_degree": {
          "type": "number",
          "format": "double"
        },
        "max_out_degree": {
          "type": "integer",
          "format": "int64"
        },
        "num_nodes": {
          "type": "integer",
          "format": "int64"
        },
        "num_channels": {
          "type": "integer",
          "format": "int64"
        },
        "total_network_capacity": {
          "type": "string",
          "format": "int64"
        },
        "avg_channel_size": {
          "type": "number",
          "format": "double"
        },
        "min_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "max_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "median_channel_size_sat": {
          "type": "string",
          "format": "int64"
        },
        "num_zombie_chans": {
          "type": "string",
          "format": "uint64",
          "description": "The number of edges marked as zombies."
        }
      }
    },
    "lnrpcNewAddressResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The newly generated wallet address"
        }
      }
    },
    "lnrpcNodeAddress": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addr": {
          "type": "string"
        }
      }
    },
    "lnrpcNodeInfo": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/lnrpcLightningNode",
          "description": "An individual vertex/node within the channel graph. A node is\nconnected to other nodes by one or more channel edges emanating from it. As\nthe graph is directed, a node will also have an incoming edge attached to\nit for each outgoing edge."
        },
        "num_channels": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of channels for the node."
        },
        "total_capacity": {
          "type": "string",
          "format": "int64",
          "description": "The sum of all channels capacity for the node, denominated in satoshis."
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "description": "A list of all public channels for the node."
        }
      }
    },
    "lnrpcNodeMetricType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "BETWEENNESS_CENTRALITY"
      ],
      "default": "UNKNOWN"
    },
    "lnrpcNodeMetricsResponse": {
      "type": "object",
      "properties": {
        "betweenness_centrality": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFloatMetric"
          },
          "description": "Betweenness centrality is the sum of the ratio of shortest paths that pass\nthrough the node for each pair of nodes in the graph (not counting paths\nstarting or ending at this node).\nMap of node pubkey to betweenness centrality of the node. Normalized\nvalues are in the [0,1] closed interval."
        }
      }
    },
    "lnrpcNodePair": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "byte",
          "description": "The sending node of the pair. When using REST, this field must be encoded as\nbase64."
        },
        "to": {
          "type": "string",
          "format": "byte",
          "description": "The receiving node of the pair. When using REST, this field must be encoded\nas base64."
        }
      }
    },
    "lnrpcNodeUpdate": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identity_key": {
          "type": "string"
        },
        "global_features": {
          "type": "string",
          "format": "byte"
        },
        "alias": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      }
    },
    "lnrpcOpenStatusUpdate": {
      "type": "object",
      "properties": {
        "chan_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate",
          "description": "Signals that the channel is now fully negotiated and the funding\ntransaction published."
        },
        "chan_open": {
          "$ref": "#/definitions/lnrpcChannelOpenUpdate",
          "description": "Signals that the channel's funding transaction has now reached the\nrequired number of confirmations on chain and can be used."
        },
        "psbt_fund": {
          "$ref": "#/definitions/lnrpcReadyForPsbtFunding",
          "description": "Signals that the funding process has been suspended and the construction\nof a PSBT that funds the channel PK script is now required."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the created channel. This value may be used to\nfurther the funding flow manually via the FundingStateStep method."
        }
      }
    },
    "lnrpcOutPoint": {
      "type": "object",
      "properties": {
        "txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes representing the transaction id."
        },
        "txid_str": {
          "type": "string",
          "description": "Reversed, hex-encoded string representing the transaction id."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output on the transaction."
        }
      }
    },
    "lnrpcPayReq": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "payment_hash": {
          "type": "string"
        },
        "num_satoshis": {
          "type": "string",
          "format": "int64"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "description_hash": {
          "type": "string"
        },
        "fallback_addr": {
          "type": "string"
        },
        "cltv_expiry": {
          "type": "string",
          "format": "int64"
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          }
        },
        "payment_addr": {
          "type": "string",
          "format": "byte"
        },
        "num_msat": {
          "type": "string",
          "format": "int64"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      }
    },
    "lnrpcPayment": {
      "type": "object",
      "properties": {
        "payment_hash": {
          "type": "string",
          "title": "The payment hash"
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use value_sat or value_msat."
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated, use creation_time_ns"
        },
        "fee": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use fee_sat or fee_msat."
        },
        "payment_preimage": {
          "type": "string",
          "title": "The payment preimage"
        },
        "value_sat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the payment in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the payment in milli-satoshis"
        },
        "payment_request": {
          "type": "string",
          "description": "The optional payment request being fulfilled."
        },
        "status": {
          "$ref": "#/definitions/PaymentPaymentStatus",
          "description": "The status of the payment."
        },
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "title": "The fee paid for this payment in satoshis"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64",
          "title": "The fee paid for this payment in milli-satoshis"
        },
        "creation_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which the payment was created."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLCAttempt"
          },
          "description": "The HTLCs made in attempt to settle the payment."
        },
        "payment_index": {
          "type": "string",
          "format": "uint64",
          "description": "The creation index of this payment. Each payment can be uniquely identified\nby this index, which may not strictly increment by 1 for payments made in\nolder versions of lnd."
        },
        "failure_reason": {
          "$ref": "#/definitions/lnrpcPaymentFailureReason"
        }
      }
    },
    "lnrpcPaymentFailureReason": {
      "type": "string",
      "enum": [
        "FAILURE_REASON_NONE",
        "FAILURE_REASON_TIMEOUT",
        "FAILURE_REASON_NO_ROUTE",
        "FAILURE_REASON_ERROR",
        "FAILURE_REASON_INCORRECT_PAYMENT_DETAILS",
        "FAILURE_REASON_INSUFFICIENT_BALANCE"
      ],
      "default": "FAILURE_REASON_NONE",
      "description": " - FAILURE_REASON_NONE: Payment isn't failed (yet).\n - FAILURE_REASON_TIMEOUT: There are more routes to try, but the payment timeout was exceeded.\n - FAILURE_REASON_NO_ROUTE: All possible routes were tried and failed permanently. Or were no\nroutes to the destination at all.\n - FAILURE_REASON_ERROR: A non-recoverable error has occured.\n - FAILURE_REASON_INCORRECT_PAYMENT_DETAILS: Payment details incorrect (unknown hash, invalid amt or\ninvalid final cltv delta)\n - FAILURE_REASON_INSUFFICIENT_BALANCE: Insufficient local balance."
    },
    "lnrpcPeer": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "title": "The identity pubkey of the peer"
        },
        "address": {
          "type": "string",
          "title": "Network address of the peer; eg `127.0.0.1:10011`"
        },
        "bytes_sent": {
          "type": "string",
          "format": "uint64",
          "title": "Bytes of data transmitted to this peer"
        },
        "bytes_recv": {
          "type": "string",
          "format": "uint64",
          "title": "Bytes of data transmitted from this peer"
        },
        "sat_sent": {
          "type": "string",
          "format": "int64",
          "title": "Satoshis sent to this peer"
        },
        "sat_recv": {
          "type": "string",
          "format": "int64",
          "title": "Satoshis received from this peer"
        },
        "inbound": {
          "type": "boolean",
          "format": "boolean",
          "title": "A channel is inbound if the counterparty initiated the channel"
        },
        "ping_time": {
          "type": "string",
          "format": "int64",
          "title": "Ping time to this peer"
        },
        "sync_type": {
          "$ref": "#/definitions/PeerSyncType",
          "description": "The type of sync we are currently performing with this peer."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features advertised by the remote peer in their init message."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcTimestampedError"
          },
          "description": "The latest errors received from our peer with timestamps, limited to the 10\nmost recent errors. These errors are tracked across peer connections, but\nare not persisted across lnd restarts. Note that these errors are only\nstored for peers that we have channels open with, to prevent peers from\nspamming us with errors at no cost."
        },
        "flap_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times we have recorded this peer going offline or coming\nonline, recorded across restarts. Note that this value is decreased over\ntime if the peer has not recently flapped, so that we can forgive peers\nwith historically high flap counts."
        },
        "last_flap_ns": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp of the last flap we observed for this peer. If this value is\nzero, we have not observed any flaps for this peer."
        }
      }
    },
    "lnrpcPeerEvent": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "description": "The identity pubkey of the peer."
        },
        "type": {
          "$ref": "#/definitions/PeerEventEventType"
        }
      }
    },
    "lnrpcPendingChannelsResponse": {
      "type": "object",
      "properties": {
        "total_limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in pending channels"
        },
        "pending_open_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponsePendingOpenChannel"
          },
          "title": "Channels pending opening"
        },
        "pending_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseClosedChannel"
          },
          "description": "Deprecated: Channels pending closing previously contained cooperatively\nclosed channels with a single confirmation. These channels are now\nconsidered closed from the time we see them on chain."
        },
        "pending_force_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseForceClosedChannel"
          },
          "title": "Channels pending force closing"
        },
        "waiting_close_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseWaitingCloseChannel"
          },
          "title": "Channels waiting for closing tx to confirm"
        }
      }
    },
    "lnrpcPendingHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean",
          "format": "boolean",
          "title": "The direction within the channel that the htlc was sent"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The total value of the htlc"
        },
        "outpoint": {
          "type": "string",
          "title": "The final output to be swept back to the user's wallet"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "The next block height at which we can spend the current stage"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks remaining until the current stage can be swept.\nNegative values indicate how many blocks have passed since becoming\nmature."
        },
        "stage": {
          "type": "integer",
          "format": "int64",
          "title": "Indicates whether the htlc is in its first or second stage of recovery"
        }
      }
    },
    "lnrpcPendingUpdate": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "format": "byte"
        },
        "output_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcPolicyUpdateResponse": {
      "type": "object"
    },
    "lnrpcPsbtShim": {
      "type": "object",
      "properties": {
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier of 32 random bytes that will be used as the pending\nchannel ID to identify the PSBT state machine when interacting with it and\non the wire protocol to initiate the funding request."
        },
        "base_psbt": {
          "type": "string",
          "format": "byte",
          "description": "An optional base PSBT the new channel output will be added to. If this is\nnon-empty, it must be a binary serialized PSBT."
        },
        "no_publish": {
          "type": "boolean",
          "format": "boolean",
          "description": "If a channel should be part of a batch (multiple channel openings in one\ntransaction), it can be dangerous if the whole batch transaction is\npublished too early before all channel opening negotiations are completed.\nThis flag prevents this particular channel from broadcasting the transaction\nafter the negotiation with the remote peer. In a batch of channel openings\nthis flag should be set to true for every channel but the very last."
        }
      }
    },
    "lnrpcQueryRoutesResponse": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRoute"
          },
          "description": "The route that results from the path finding operation. This is still a\nrepeated field to retain backwards compatibility."
        },
        "success_prob": {
          "type": "number",
          "format": "double",
          "title": "The success probability of the returned route based on the current mission\ncontrol state. [EXPERIMENTAL]"
        }
      }
    },
    "lnrpcReadyForPsbtFunding": {
      "type": "object",
      "properties": {
        "funding_address": {
          "type": "string",
          "description": "The P2WSH address of the channel funding multisig address that the below\nspecified amount in satoshis needs to be sent to."
        },
        "funding_amount": {
          "type": "string",
          "format": "int64",
          "description": "The exact amount in satoshis that needs to be sent to the above address to\nfund the pending channel."
        },
        "psbt": {
          "type": "string",
          "format": "byte",
          "description": "A raw PSBT that contains the pending channel output. If a base PSBT was\nprovided in the PsbtShim, this is the base PSBT with one additional output.\nIf no base PSBT was specified, this is an otherwise empty PSBT with exactly\none output."
        }
      }
    },
    "lnrpcResolution": {
      "type": "object",
      "properties": {
        "resolution_type": {
          "$ref": "#/definitions/lnrpcResolutionType",
          "description": "The type of output we are resolving."
        },
        "outcome": {
          "$ref": "#/definitions/lnrpcResolutionOutcome",
          "description": "The outcome of our on chain action that resolved the outpoint."
        },
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "description": "The outpoint that was spent by the resolution."
        },
        "amount_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount that was claimed by the resolution."
        },
        "sweep_txid": {
          "type": "string",
          "description": "The hex-encoded transaction ID of the sweep transaction that spent the\noutput."
        }
      }
    },
    "lnrpcResolutionOutcome": {
      "type": "string",
      "enum": [
        "OUTCOME_UNKNOWN",
        "CLAIMED",
        "UNCLAIMED",
        "ABANDONED",
        "FIRST_STAGE",
        "TIMEOUT"
      ],
      "default": "OUTCOME_UNKNOWN",
      "description": " - OUTCOME_UNKNOWN: Outcome unknown.\n - CLAIMED: An output was claimed on chain.\n - UNCLAIMED: An output was left unclaimed on chain.\n - ABANDONED: ResolverOutcomeAbandoned indicates that an output that we did not\nclaim on chain, for example an anchor that we did not sweep and a\nthird party claimed on chain, or a htlc that we could not decode\nso left unclaimed.\n - FIRST_STAGE: If we force closed our channel, our htlcs need to be claimed in two\nstages. This outcome represents the broadcast of a timeout or success\ntransaction for this two stage htlc claim.\n - TIMEOUT: A htlc was timed out on chain."
    },
    "lnrpcResolutionType": {
      "type": "string",
      "enum": [
        "TYPE_UNKNOWN",
        "ANCHOR",
        "INCOMING_HTLC",
        "OUTGOING_HTLC",
        "COMMIT"
      ],
      "default": "TYPE_UNKNOWN",
      "description": " - ANCHOR: We resolved an anchor output.\n - INCOMING_HTLC: We are resolving an incoming htlc on chain. This if this htlc is\nclaimed, we swept the incoming htlc with the preimage. If it is timed\nout, our peer swept the timeout path.\n - OUTGOING_HTLC: We are resolving an outgoing htlc on chain. If this htlc is claimed,\nthe remote party swept the htlc with the preimage. If it is timed out,\nwe swept it with the timeout path.\n - COMMIT: We force closed and need to sweep our time locked commitment output."
    },
    "lnrpcRestoreBackupResponse": {
      "type": "object"
    },
    "lnrpcRoute": {
      "type": "object",
      "properties": {
        "total_time_lock": {
          "type": "integer",
          "format": "int64",
          "description": "The cumulative (final) time lock across the entire route. This is the CLTV\nvalue that should be extended to the first hop in the route. All other hops\nwill decrement the time-lock as advertised, leaving enough time for all\nhops to wait for or present the payment preimage to complete the payment."
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "description": "The sum of the fees paid at each hop within the final route. In the case\nof a one-hop payment, this value will be zero as we don't need to pay a fee\nto ourselves."
        },
        "total_amt": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of funds required to complete a payment over this route.\nThis value includes the cumulative fees at each hop. As a result, the HTLC\nextended to the first-hop in the route will need to have at least this many\nsatoshis, otherwise the route will fail at an intermediate node due to an\ninsufficient amount of fees."
        },
        "hops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHop"
          },
          "description": "Contains details concerning the specific forwarding details at each hop."
        },
        "total_fees_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total fees in millisatoshis."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total amount in millisatoshis."
        }
      },
      "description": "A path through the channel graph which runs over one or more channels in\nsuccession. This struct carries all the information required to craft the\nSphinx onion packet, and send the payment along the first hop in the path. A\nroute is only selected as valid if all the channels have sufficient capacity to\ncarry the initial payment amount after fees are accounted for."
    },
    "lnrpcRouteHint": {
      "type": "object",
      "properties": {
        "hop_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHopHint"
          },
          "description": "A list of hop hints that when chained together can assist in reaching a\nspecific destination."
        }
      }
    },
    "lnrpcRoutingPolicy": {
      "type": "object",
      "properties": {
        "time_lock_delta": {
          "type": "integer",
          "format": "int64"
        },
        "min_htlc": {
          "type": "string",
          "format": "int64"
        },
        "fee_base_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_rate_milli_msat": {
          "type": "string",
          "format": "int64"
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "max_htlc_msat": {
          "type": "string",
          "format": "uint64"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcSendCoinsResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "The transaction ID of the transaction"
        }
      }
    },
    "lnrpcSendManyResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "The id of the transaction"
        }
      }
    },
    "lnrpcSendResponse": {
      "type": "object",
      "properties": {
        "payment_error": {
          "type": "string"
        },
        "payment_preimage": {
          "type": "string",
          "format": "byte"
        },
        "payment_route": {
          "$ref": "#/definitions/lnrpcRoute"
        },
        "payment_hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "lnrpcSignMessageResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "title": "The signature for the given message"
        }
      }
    },
    "lnrpcStopResponse": {
      "type": "object"
    },
    "lnrpcTimestampedError": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "The unix timestamp in seconds when the error occurred."
        },
        "error": {
          "type": "string",
          "description": "The string representation of the error sent by our peer."
        }
      }
    },
    "lnrpcTransaction": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "type": "string",
          "title": "The transaction hash"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The transaction amount, denominated in satoshis"
        },
        "num_confirmations": {
          "type": "integer",
          "format": "int32",
          "title": "The number of confirmations"
        },
        "block_hash": {
          "type": "string",
          "title": "The hash of the block this transaction was included in"
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "title": "The height of the block this transaction was included in"
        },
        "time_stamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of this transaction"
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "title": "Fees paid for this transaction"
        },
        "dest_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Addresses that received funds for this transaction"
        },
        "raw_tx_hex": {
          "type": "string",
          "description": "The raw transaction hex."
        },
        "label": {
          "type": "string",
          "description": "A label that was optionally set on transaction broadcast."
        }
      }
    },
    "lnrpcTransactionDetails": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcTransaction"
          },
          "description": "The list of transactions relevant to the wallet."
        }
      }
    },
    "lnrpcUtxo": {
      "type": "object",
      "properties": {
        "address_type": {
          "$ref": "#/definitions/lnrpcAddressType",
          "title": "The type of address"
        },
        "address": {
          "type": "string",
          "title": "The address"
        },
        "amount_sat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the unspent coin in satoshis"
        },
        "pk_script": {
          "type": "string",
          "title": "The pkscript in hex"
        },
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "title": "The outpoint in format txid:n"
        },
        "confirmations": {
          "type": "string",
          "format": "int64",
          "title": "The number of confirmations for the Utxo"
        }
      }
    },
    "lnrpcVerifyChanBackupResponse": {
      "type": "object"
    },
    "lnrpcVerifyMessageResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the signature was valid over the given message"
        },
        "pubkey": {
          "type": "string",
          "title": "The pubkey recovered from the signature"
        }
      }
    },
    "lnrpcWalletBalanceResponse": {
      "type": "object",
      "properties": {
        "total_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance of the wallet"
        },
        "confirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "The confirmed balance of a wallet(with \u003e= 1 confirmations)"
        },
        "unconfirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "The unconfirmed balance of a wallet(with 0 confirmations)"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
